{"id":1286,"date":"2020-11-27T02:52:03","date_gmt":"2020-11-27T02:52:03","guid":{"rendered":"https:\/\/www.pythontutorial.net\/?page_id=1286"},"modified":"2022-09-07T00:55:08","modified_gmt":"2022-09-07T00:55:08","slug":"tkinter-pack","status":"publish","type":"page","link":"https:\/\/www.pythontutorial.net\/tkinter\/tkinter-pack\/","title":{"rendered":"Tkinter Pack"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you&#8217;ll learn about the Tkinter <code>pack<\/code> geometry manager and how to use it to arrange widgets on a window.<\/p>\n\n\n\n<h2>Introduction to the Tkinter pack geometry manager<\/h2>\n\n\n\n<p>So far, you have learned how to use the <code>pack()<\/code> method to add widgets to a window.<\/p>\n\n\n\n<p>Tkinter uses the geometry manager to arrange widgets on a window. The <code>pack()<\/code> method is one of three geometry managers in Tkinter. The other geometry managers are <code><a href=\"https:\/\/www.pythontutorial.net\/tkinter\/tkinter-grid\/\">grid()<\/a><\/code> and <code><a href=\"https:\/\/www.pythontutorial.net\/tkinter\/tkinter-place\/\">place()<\/a><\/code>.<\/p>\n\n\n\n<p>The pack arranges widgets around the edges of their container. The container can be the root window or a <a href=\"https:\/\/www.pythontutorial.net\/tkinter\/tkinter-frame\/\">frame<\/a>.<\/p>\n\n\n\n<p>Let&#8217;s start with a simple program to understand each option better.<\/p>\n\n\n\n<h2>Tkinter pack geometry manager example<\/h2>\n\n\n\n<p>The <code>pack<\/code> geometry manager has many configurations. The following are the most commonly used options: <code>fill<\/code>, <code>expand<\/code>, <code>side<\/code>, <code>anchor<\/code>, <code>ipadx<\/code>, <code>ipady<\/code>, <code>padx<\/code>, and <code>pady<\/code>.<\/p>\n\n\n\n<h3>1) Pack with default options<\/h3>\n\n\n\n<p>The following shows how to use the <code>pack<\/code> geometry manager to arrange two <a href=\"https:\/\/www.pythontutorial.net\/tkinter\/tkinter-label\/\">Label<\/a> widgets on the root window:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">import tkinter <span class=\"hljs-keyword\">as<\/span> tk\n\nroot = tk.Tk()\nroot.title(<span class=\"hljs-string\">'Pack Demo'<\/span>)\nroot.geometry(<span class=\"hljs-string\">\"350x200\"<\/span>)\n\n<span class=\"hljs-comment\"># box 1<\/span>\nbox1 = tk.Label(root, text=<span class=\"hljs-string\">\"Box 1\"<\/span>, bg=<span class=\"hljs-string\">\"green\"<\/span>, fg=<span class=\"hljs-string\">\"white\"<\/span>)\nbox1.pack()\n\n<span class=\"hljs-comment\"># box 2<\/span>\nbox2 = tk.Label(root, text=<span class=\"hljs-string\">\"Box 2\"<\/span>, bg=<span class=\"hljs-string\">\"red\"<\/span>, fg=<span class=\"hljs-string\">\"white\"<\/span>)\nbox2.pack()\n\nroot.mainloop()<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><img decoding=\"async\" loading=\"lazy\" width=\"348\" height=\"244\" src=\"https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2022\/09\/tkinter-pack-basics.png\" alt=\"\" class=\"wp-image-4582\" srcset=\"https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2022\/09\/tkinter-pack-basics.png 348w, https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2022\/09\/tkinter-pack-basics-300x210.png 300w\" sizes=\"(max-width: 348px) 100vw, 348px\" \/><\/figure><\/div>\n\n\n<p>In this example, we have two boxes: green and red. The <code>pack()<\/code> places the boxes on top of each other because it uses the default options.<\/p>\n\n\n\n<p>Before diving into other options, you need to understand the <code>x<\/code> and <code>y<\/code> coordinates of the window:<\/p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><img decoding=\"async\" loading=\"lazy\" width=\"466\" height=\"356\" src=\"https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2022\/09\/tkinter-pack-coordinates.png\" alt=\"\" class=\"wp-image-4583\" srcset=\"https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2022\/09\/tkinter-pack-coordinates.png 466w, https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2022\/09\/tkinter-pack-coordinates-300x229.png 300w\" sizes=\"(max-width: 466px) 100vw, 466px\" \/><\/figure><\/div>\n\n\n<p>The top left corner of the window is the origin with the coordinate <code>(0,0)<\/code>. The x-coordinate increments from left to right and the y-coordinate increments from top to bottom.<\/p>\n\n\n\n<h3>2) ipadx &amp; ipady: setting internal paddings<\/h3>\n\n\n\n<p>To create internal paddings for widgets, you use the <code>ipadx<\/code> and <code>ipady<\/code> parameters:<\/p>\n\n\n\n<ul><li><code>ipadx<\/code> creates padding left and right, or padding along the x-axis.<\/li><li><code>ipady<\/code> creates padding top and bottom, or padding along the y-axis.<\/li><\/ul>\n\n\n\n<p>For example, the following program uses <code>ipadx<\/code> and <code>ipady<\/code> parameters to set the internal paddings of each box:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import<\/span> tkinter <span class=\"hljs-keyword\">as<\/span> tk\n\nroot = tk.Tk()\nroot.title(<span class=\"hljs-string\">'Pack Demo'<\/span>)\nroot.geometry(<span class=\"hljs-string\">\"350x200\"<\/span>)\n\n<span class=\"hljs-comment\"># box 1<\/span>\nbox1 = tk.Label(root, text=<span class=\"hljs-string\">\"Box 1\"<\/span>, bg=<span class=\"hljs-string\">\"green\"<\/span>, fg=<span class=\"hljs-string\">\"white\"<\/span>)\nbox1.pack(ipadx=<span class=\"hljs-number\">10<\/span>, ipady=<span class=\"hljs-number\">10<\/span>)\n\n<span class=\"hljs-comment\"># box 2<\/span>\nbox2 = tk.Label(root, text=<span class=\"hljs-string\">\"Box 2\"<\/span>, bg=<span class=\"hljs-string\">\"red\"<\/span>, fg=<span class=\"hljs-string\">\"white\"<\/span>)\nbox2.pack(ipadx=<span class=\"hljs-number\">10<\/span>, ipady=<span class=\"hljs-number\">10<\/span>)\n\nroot.mainloop()<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><img decoding=\"async\" loading=\"lazy\" width=\"350\" height=\"245\" src=\"https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2022\/09\/tkinter-pack-internal-padding.png\" alt=\"\" class=\"wp-image-4584\" srcset=\"https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2022\/09\/tkinter-pack-internal-padding.png 350w, https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2022\/09\/tkinter-pack-internal-padding-300x210.png 300w\" sizes=\"(max-width: 350px) 100vw, 350px\" \/><\/figure><\/div>\n\n\n<h3>3) Using the <em>fill <\/em>option<\/h3>\n\n\n\n<p>The <code>fill<\/code> option accepts one of three string constants defined in the <code>tkinter<\/code> module. <\/p>\n\n\n\n<ul><li><code>tkinter.X<\/code> &#8211; fill available space along the x-axis<\/li><li><code>tkinter.Y<\/code> &#8211; fill available space along the y-axis<\/li><li><code>tkiniter.BOTH<\/code> &#8211; fill available space long both axises<\/li><\/ul>\n\n\n\n<p>These string constants are equivalent to <code>'x'<\/code>, <code>'y'<\/code>, and <code>'both'<\/code>. <\/p>\n\n\n\n<p>Note that if you import the <code>tkinter<\/code> module as <code>tk<\/code>, you need to reference the constants <code>X<\/code>, <code>Y<\/code>, and <code>BOTH<\/code> using the <code>tk<\/code> prefix e.g., <code>tk.X<\/code>, <code>tk.Y<\/code>, and <code>tk.BOTH<\/code>.<\/p>\n\n\n\n<p>The following example uses the fill parameter to set the <code>fill<\/code> option for the first label:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">box1.pack(ipadx=<span class=\"hljs-number\">20<\/span>, ipady=<span class=\"hljs-number\">20<\/span>, fill=tk.X)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>&#8230; you&#8217;ll see that the widget fills all available space across the x-axis:<\/p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><img decoding=\"async\" loading=\"lazy\" width=\"352\" height=\"246\" src=\"https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2022\/09\/tkinter-pack-fill-x.png\" alt=\"\" class=\"wp-image-4585\" srcset=\"https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2022\/09\/tkinter-pack-fill-x.png 352w, https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2022\/09\/tkinter-pack-fill-x-300x210.png 300w\" sizes=\"(max-width: 352px) 100vw, 352px\" \/><\/figure><\/div>\n\n\n<p>However, if you change to <code>fill=tk.Y<\/code> as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">box1.pack(ipadx=<span class=\"hljs-number\">20<\/span>,ipady=<span class=\"hljs-number\">20<\/span>,fill=tk.Y)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>&#8230; you&#8217;ll see that the first widget doesn&#8217;t fill all spaces vertically:<\/p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><img decoding=\"async\" loading=\"lazy\" width=\"350\" height=\"245\" src=\"https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2022\/09\/tkinter-pack-internal-padding.png\" alt=\"\" class=\"wp-image-4584\" srcset=\"https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2022\/09\/tkinter-pack-internal-padding.png 350w, https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2022\/09\/tkinter-pack-internal-padding-300x210.png 300w\" sizes=\"(max-width: 350px) 100vw, 350px\" \/><\/figure><\/div>\n\n\n<p>This is because the <code>pack<\/code> allocates space to each widget as highlighted in the following picture:<\/p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><img decoding=\"async\" loading=\"lazy\" width=\"350\" height=\"245\" src=\"https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2022\/09\/tkinter-pack-fill-spaces.png\" alt=\"\" class=\"wp-image-4586\" srcset=\"https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2022\/09\/tkinter-pack-fill-spaces.png 350w, https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2022\/09\/tkinter-pack-fill-spaces-300x210.png 300w\" sizes=\"(max-width: 350px) 100vw, 350px\" \/><\/figure><\/div>\n\n\n<p>When you use the <code>fill<\/code> option, the area each widget can fill is constrained by their allocated areas.<\/p>\n\n\n\n<h3>4) Using the <em>expand <\/em>option<\/h3>\n\n\n\n<p>The <code>expand<\/code> option allocates more available space to a widget. If you add the <code>expand<\/code> option to the first widget:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">box1.pack(ipadx=<span class=\"hljs-number\">20<\/span>,ipady=<span class=\"hljs-number\">20<\/span>,expand=<span class=\"hljs-literal\">True<\/span>)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>&#8230;you&#8217;ll get the following output:<\/p>\n\n\n<div class=\"wp-block-image border\">\n<figure class=\"aligncenter size-full\"><img decoding=\"async\" loading=\"lazy\" width=\"350\" height=\"244\" src=\"https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2022\/09\/tkinter-pack-expand.png\" alt=\"\" class=\"wp-image-4587\" srcset=\"https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2022\/09\/tkinter-pack-expand.png 350w, https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2022\/09\/tkinter-pack-expand-300x209.png 300w\" sizes=\"(max-width: 350px) 100vw, 350px\" \/><\/figure><\/div>\n\n\n<p>In this example, the first widget takes all available space in the window except for the space allocated to the second widget.<\/p>\n\n\n\n<p>Since the first widget doesn&#8217;t have the <code>fill<\/code> option, it floats in the middle of the allocated area.<\/p>\n\n\n\n<p>If you set <code>fill<\/code> option of the first widget to <code>tk.BOTH<\/code>:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">box1.pack(ipadx=<span class=\"hljs-number\">20<\/span>, ipady=<span class=\"hljs-number\">20<\/span>, fill=tk.BOTH, expand=<span class=\"hljs-literal\">True<\/span>)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>&#8230;you&#8217;ll see that the first widget fills up all of its allocated space:<\/p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><img decoding=\"async\" loading=\"lazy\" width=\"352\" height=\"246\" src=\"https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2022\/09\/tkinter-pack-expand-and-fill.png\" alt=\"\" class=\"wp-image-4588\" srcset=\"https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2022\/09\/tkinter-pack-expand-and-fill.png 352w, https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2022\/09\/tkinter-pack-expand-and-fill-300x210.png 300w\" sizes=\"(max-width: 352px) 100vw, 352px\" \/><\/figure><\/div>\n\n\n<p>If you add the <code>expand<\/code> option to both widgets, the <code>pack<\/code> manager will allocate the space to them evenly. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import<\/span> tkinter <span class=\"hljs-keyword\">as<\/span> tk\n\nroot = tk.Tk()\nroot.title(<span class=\"hljs-string\">'Pack Demo'<\/span>)\nroot.geometry(<span class=\"hljs-string\">\"350x200\"<\/span>)\n\n<span class=\"hljs-comment\"># box 1<\/span>\nbox1 = tk.Label(root, text=<span class=\"hljs-string\">\"Box 1\"<\/span>, bg=<span class=\"hljs-string\">\"green\"<\/span>, fg=<span class=\"hljs-string\">\"white\"<\/span>)\nbox1.pack(ipadx=<span class=\"hljs-number\">20<\/span>, ipady=<span class=\"hljs-number\">20<\/span>, fill=tk.BOTH, expand=<span class=\"hljs-literal\">True<\/span>)\n\n<span class=\"hljs-comment\"># box 2<\/span>\nbox2 = tk.Label(root, text=<span class=\"hljs-string\">\"Box 2\"<\/span>, bg=<span class=\"hljs-string\">\"red\"<\/span>, fg=<span class=\"hljs-string\">\"white\"<\/span>)\nbox2.pack(ipadx=<span class=\"hljs-number\">20<\/span>, ipady=<span class=\"hljs-number\">20<\/span>, expand=<span class=\"hljs-literal\">True<\/span>)\n\nroot.mainloop()<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><img decoding=\"async\" loading=\"lazy\" width=\"352\" height=\"246\" src=\"https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2022\/09\/tkinter-pack-expand-space-evenly.png\" alt=\"\" class=\"wp-image-4589\" srcset=\"https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2022\/09\/tkinter-pack-expand-space-evenly.png 352w, https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2022\/09\/tkinter-pack-expand-space-evenly-300x210.png 300w\" sizes=\"(max-width: 352px) 100vw, 352px\" \/><\/figure><\/div>\n\n\n<p>Notice that the second widget doesn&#8217;t use all allocated space because it doesn&#8217;t have the <code>fill<\/code> option.<\/p>\n\n\n\n<p>When you set the <code>expand<\/code> to <code>True<\/code> for all widgets, the <code>pack<\/code> geometry manager will allocate spaces to them evenly. However, this is only true when all the widgets share the same <code>side<\/code>.<\/p>\n\n\n\n<h3>5) Using the <em>anchor <\/em>option<\/h3>\n\n\n\n<p>The <code>anchor<\/code> allows you to anchor the widget to the edge of the allocated space. It accepts one of the following values:<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><thead><tr><th>Sticky<\/th><th>Description<\/th><\/tr><\/thead><tbody><tr><td>N<\/td><td>North or Top Center<\/td><\/tr><tr><td>S<\/td><td>South or Bottom Center<\/td><\/tr><tr><td>E<\/td><td>East or Right Center<\/td><\/tr><tr><td>W<\/td><td>West or Left Center<\/td><\/tr><tr><td>NW<\/td><td>North West or Top Left<\/td><\/tr><tr><td>NE<\/td><td>North East or Top Right<\/td><\/tr><tr><td>SE<\/td><td>South East or Bottom Right<\/td><\/tr><tr><td>SW<\/td><td>South West or Bottom Left<\/td><\/tr><tr><td>CENTER<\/td><td>Center<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>The following picture illustrates the anchor options:<\/p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img decoding=\"async\" loading=\"lazy\" width=\"411\" height=\"241\" src=\"https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2022\/09\/tkinter-pack-anchor-illustration.png\" alt=\"tkinter pack anchor illustration\" class=\"wp-image-4614\" srcset=\"https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2022\/09\/tkinter-pack-anchor-illustration.png 411w, https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2022\/09\/tkinter-pack-anchor-illustration-300x176.png 300w\" sizes=\"(max-width: 411px) 100vw, 411px\" \/><\/figure>\n\n\n\n<p>For example, the following program shows widgets that use <code>E<\/code> and <code>W<\/code> anchors:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">import tkinter <span class=\"hljs-keyword\">as<\/span> tk\n\nroot = tk.Tk()\nroot.title(<span class=\"hljs-string\">'Pack Demo'<\/span>)\nroot.geometry(<span class=\"hljs-string\">\"350x200\"<\/span>)\n\n<span class=\"hljs-comment\"># box 1<\/span>\nbox1 = tk.Label(root, text=<span class=\"hljs-string\">\"Box 1\"<\/span>, bg=<span class=\"hljs-string\">\"green\"<\/span>, fg=<span class=\"hljs-string\">\"white\"<\/span>)\nbox1.pack(ipadx=<span class=\"hljs-number\">20<\/span>, ipady=<span class=\"hljs-number\">20<\/span>, anchor=tk.E,  expand=<span class=\"hljs-keyword\">True<\/span>)\n\n<span class=\"hljs-comment\"># box 2<\/span>\nbox2 = tk.Label(root, text=<span class=\"hljs-string\">\"Box 2\"<\/span>, bg=<span class=\"hljs-string\">\"red\"<\/span>, fg=<span class=\"hljs-string\">\"white\"<\/span>)\nbox2.pack(ipadx=<span class=\"hljs-number\">20<\/span>, ipady=<span class=\"hljs-number\">20<\/span>, anchor=tk.W, expand=<span class=\"hljs-keyword\">True<\/span>)\n\n\nroot.mainloop()<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img decoding=\"async\" loading=\"lazy\" width=\"352\" height=\"246\" src=\"https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2022\/09\/tkinter-pack-anchor-demo.png\" alt=\"\" class=\"wp-image-4599\" srcset=\"https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2022\/09\/tkinter-pack-anchor-demo.png 352w, https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2022\/09\/tkinter-pack-anchor-demo-300x210.png 300w\" sizes=\"(max-width: 352px) 100vw, 352px\" \/><\/figure>\n\n\n\n<h3>6) Using the <em>side <\/em>option<\/h3>\n\n\n\n<p>The <code>side<\/code> option specifies the alignment of the widget:<\/p>\n\n\n\n<ul><li><code>tkinter.TOP<\/code><\/li><li><code>tkinter.LEFT<\/code><\/li><li><code>tkinter.RIGHT<\/code><\/li><li><code>tkinter.BOTTOM<\/code><\/li><\/ul>\n\n\n\n<p>They are equivalent to <code>'left'<\/code>, <code>'top'<\/code>, <code>'right'<\/code>, and <code>'bottom'<\/code>.<\/p>\n\n\n\n<p>The <code>side<\/code> defaults to <code>TOP<\/code>. In other words, widgets are aligned to the top of their container.<\/p>\n\n\n\n<p>The following example sets the <code>side<\/code> for the first widget to <code>tkinter.LEFT<\/code> :<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import<\/span> tkinter <span class=\"hljs-keyword\">as<\/span> tk\n\nroot = tk.Tk()\nroot.title(<span class=\"hljs-string\">'Pack Demo'<\/span>)\nroot.geometry(<span class=\"hljs-string\">\"350x200\"<\/span>)\n\n<span class=\"hljs-comment\"># box 1<\/span>\nbox1 = tk.Label(root, text=<span class=\"hljs-string\">\"Box 1\"<\/span>, bg=<span class=\"hljs-string\">\"green\"<\/span>, fg=<span class=\"hljs-string\">\"white\"<\/span>)\nbox1.pack(ipadx=<span class=\"hljs-number\">20<\/span>, ipady=<span class=\"hljs-number\">20<\/span>, fill=tk.BOTH, expand=<span class=\"hljs-literal\">True<\/span>, side=tk.LEFT)\n\n<span class=\"hljs-comment\"># box 2<\/span>\nbox2 = tk.Label(root, text=<span class=\"hljs-string\">\"Box 2\"<\/span>, bg=<span class=\"hljs-string\">\"red\"<\/span>, fg=<span class=\"hljs-string\">\"white\"<\/span>)\nbox2.pack(ipadx=<span class=\"hljs-number\">20<\/span>, ipady=<span class=\"hljs-number\">20<\/span>, fill=tk.BOTH, expand=<span class=\"hljs-literal\">True<\/span>)\n\nroot.mainloop()<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"302\" height=\"232\" src=\"https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2020\/11\/tkinter-pack-side-left.png\" alt=\"\" class=\"wp-image-1294\" srcset=\"https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2020\/11\/tkinter-pack-side-left.png 302w, https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2020\/11\/tkinter-pack-side-left-300x230.png 300w\" sizes=\"(max-width: 302px) 100vw, 302px\" \/><\/figure><\/div>\n\n\n<p>In this example, the <code>expand<\/code> option may not work as you expected. The reason is that widgets have different sides.<\/p>\n\n\n\n<p>To make their space even again, you can:<\/p>\n\n\n\n<ul><li>Set the <code>side<\/code> of both widgets to <code>'left'<\/code> <\/li><li>Or set the side of a widget to <code>'left'<\/code> and the side of the other widget to <code>'right'<\/code>.<\/li><\/ul>\n\n\n\n<p>For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import<\/span> tkinter <span class=\"hljs-keyword\">as<\/span> tk\n\nroot = tk.Tk()\nroot.title(<span class=\"hljs-string\">'Pack Demo'<\/span>)\nroot.geometry(<span class=\"hljs-string\">\"350x200\"<\/span>)\n\n<span class=\"hljs-comment\"># box 1<\/span>\nbox1 = tk.Label(root, text=<span class=\"hljs-string\">\"Box 1\"<\/span>, bg=<span class=\"hljs-string\">\"green\"<\/span>, fg=<span class=\"hljs-string\">\"white\"<\/span>)\nbox1.pack(ipadx=<span class=\"hljs-number\">20<\/span>, ipady=<span class=\"hljs-number\">20<\/span>, fill=tk.BOTH, expand=<span class=\"hljs-literal\">True<\/span>, side=tk.LEFT)\n\n<span class=\"hljs-comment\"># box 2<\/span>\nbox2 = tk.Label(root, text=<span class=\"hljs-string\">\"Box 2\"<\/span>, bg=<span class=\"hljs-string\">\"red\"<\/span>, fg=<span class=\"hljs-string\">\"white\"<\/span>)\nbox2.pack(ipadx=<span class=\"hljs-number\">20<\/span>, ipady=<span class=\"hljs-number\">20<\/span>, fill=tk.BOTH, expand=<span class=\"hljs-literal\">True<\/span>, side=tk.RIGHT)\n\nroot.mainloop()<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"302\" height=\"232\" src=\"https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2020\/11\/tkinter-pack-same-side.png\" alt=\"\" class=\"wp-image-1295\" srcset=\"https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2020\/11\/tkinter-pack-same-side.png 302w, https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2020\/11\/tkinter-pack-same-side-300x230.png 300w\" sizes=\"(max-width: 302px) 100vw, 302px\" \/><\/figure><\/div>\n\n\n<h3>6) padx and pady: set the external paddings<\/h3>\n\n\n\n<p>To set the external paddings of widgets, you use the <code>padx<\/code> and <code>pady<\/code> parameters:<\/p>\n\n\n\n<ul><li><code>padx<\/code> &#8211; fill available space along the x-axis<\/li><li><code>pady<\/code> &#8211; fill available space along the y-axis<\/li><\/ul>\n\n\n\n<p>For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-11\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">import tkinter <span class=\"hljs-keyword\">as<\/span> tk\n\nroot = tk.Tk()\nroot.title(<span class=\"hljs-string\">'Pack Demo'<\/span>)\nroot.geometry(<span class=\"hljs-string\">\"350x200\"<\/span>)\n\n<span class=\"hljs-comment\"># box 1<\/span>\nbox1 = tk.Label(root, text=<span class=\"hljs-string\">\"Box 1\"<\/span>, bg=<span class=\"hljs-string\">\"green\"<\/span>, fg=<span class=\"hljs-string\">\"white\"<\/span>)\nbox1.pack(ipadx=<span class=\"hljs-number\">20<\/span>, ipady=<span class=\"hljs-number\">20<\/span>, padx=<span class=\"hljs-number\">20<\/span>, pady=<span class=\"hljs-number\">20<\/span>,\n          fill=tk.BOTH, expand=<span class=\"hljs-keyword\">True<\/span>)\n\n<span class=\"hljs-comment\"># box 2<\/span>\nbox2 = tk.Label(root, text=<span class=\"hljs-string\">\"Box 2\"<\/span>, bg=<span class=\"hljs-string\">\"red\"<\/span>, fg=<span class=\"hljs-string\">\"white\"<\/span>)\nbox2.pack(ipadx=<span class=\"hljs-number\">20<\/span>, ipady=<span class=\"hljs-number\">20<\/span>, padx=<span class=\"hljs-number\">20<\/span>, pady=<span class=\"hljs-number\">20<\/span>,\n          fill=tk.BOTH, expand=<span class=\"hljs-keyword\">True<\/span>)\n\nroot.mainloop()<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-11\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img decoding=\"async\" loading=\"lazy\" width=\"352\" height=\"246\" src=\"https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2022\/09\/tkinter-pack-paddings.png\" alt=\"\" class=\"wp-image-4590\" srcset=\"https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2022\/09\/tkinter-pack-paddings.png 352w, https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2022\/09\/tkinter-pack-paddings-300x210.png 300w\" sizes=\"(max-width: 352px) 100vw, 352px\" \/><\/figure>\n\n\n\n<h2>When to use the pack geometry manager<\/h2>\n\n\n\n<p>The pack geometry manager is suitable for the following:<\/p>\n\n\n\n<ul><li>Placing widgets in a top-down layout.<\/li><li>Placing widgets side-by-side layout.<\/li><\/ul>\n\n\n\n<p>See the following example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-12\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import<\/span> tkinter <span class=\"hljs-keyword\">as<\/span> tk\n<span class=\"hljs-keyword\">from<\/span> tkinter <span class=\"hljs-keyword\">import<\/span> ttk\n\nroot = tk.Tk()\nroot.title(<span class=\"hljs-string\">'Pack Demo'<\/span>)\nroot.geometry(<span class=\"hljs-string\">\"300x200\"<\/span>)\n\nipadding = {<span class=\"hljs-string\">'ipadx'<\/span>: <span class=\"hljs-number\">10<\/span>, <span class=\"hljs-string\">'ipady'<\/span>: <span class=\"hljs-number\">10<\/span>}\n\n<span class=\"hljs-comment\"># place widgets top down<\/span>\nlabel1 = tk.Label(root, text=<span class=\"hljs-string\">'Box 1'<\/span>, bg=<span class=\"hljs-string\">\"red\"<\/span>, fg=<span class=\"hljs-string\">\"white\"<\/span>)\nlabel1.pack(**ipadding, fill=tk.X)\n\nlabel2 = tk.Label(root, text=<span class=\"hljs-string\">'Box 2'<\/span>, bg=<span class=\"hljs-string\">\"green\"<\/span>, fg=<span class=\"hljs-string\">\"white\"<\/span>)\nlabel2.pack(**ipadding, fill=tk.X)\n\nlabel3 = tk.Label(root, text=<span class=\"hljs-string\">'Box 3'<\/span>, bg=<span class=\"hljs-string\">\"blue\"<\/span>, fg=<span class=\"hljs-string\">\"white\"<\/span>)\nlabel3.pack(**ipadding, fill=tk.X)\n\n<span class=\"hljs-comment\"># place widgets side by side<\/span>\nlabel4 = tk.Label(root, text=<span class=\"hljs-string\">'Left'<\/span>, bg=<span class=\"hljs-string\">\"cyan\"<\/span>, fg=<span class=\"hljs-string\">\"black\"<\/span>)\nlabel4.pack(**ipadding, expand=<span class=\"hljs-literal\">True<\/span>, fill=tk.BOTH, side=tk.LEFT)\n\nlabel5 = tk.Label(root, text=<span class=\"hljs-string\">'Center'<\/span>, bg=<span class=\"hljs-string\">\"magenta\"<\/span>, fg=<span class=\"hljs-string\">\"black\"<\/span>)\nlabel5.pack(**ipadding, expand=<span class=\"hljs-literal\">True<\/span>, fill=tk.BOTH, side=tk.LEFT)\n\nlabel6 = tk.Label(root, text=<span class=\"hljs-string\">'Right'<\/span>, bg=<span class=\"hljs-string\">\"yellow\"<\/span>, fg=<span class=\"hljs-string\">\"black\"<\/span>)\nlabel6.pack(**ipadding, expand=<span class=\"hljs-literal\">True<\/span>, fill=tk.BOTH, side=tk.LEFT)\n\nroot.mainloop()<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-12\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"302\" height=\"232\" src=\"https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2020\/11\/tkinter-pack-example.png\" alt=\"\" class=\"wp-image-1296\" srcset=\"https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2020\/11\/tkinter-pack-example.png 302w, https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2020\/11\/tkinter-pack-example-300x230.png 300w\" sizes=\"(max-width: 302px) 100vw, 302px\" \/><\/figure><\/div>\n\n\n<h2>Using pack to create a login form example<\/h2>\n\n\n\n<p>The following example uses the pack() method to create a login form:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-13\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import<\/span> tkinter <span class=\"hljs-keyword\">as<\/span> tk\r\n<span class=\"hljs-keyword\">from<\/span> tkinter <span class=\"hljs-keyword\">import<\/span> ttk\r\n\r\nroot = tk.Tk()\r\nroot.title(<span class=\"hljs-string\">'Login'<\/span>)\r\nroot.geometry(<span class=\"hljs-string\">\"350x220\"<\/span>)\r\n\r\n\r\nfields = {}\r\n\r\nfields&#91;<span class=\"hljs-string\">'username_label'<\/span>] = ttk.Label(text=<span class=\"hljs-string\">'Username:'<\/span>)\r\nfields&#91;<span class=\"hljs-string\">'username'<\/span>] = ttk.Entry()\r\n\r\nfields&#91;<span class=\"hljs-string\">'password_label'<\/span>] = ttk.Label(text=<span class=\"hljs-string\">'Password:'<\/span>)\r\nfields&#91;<span class=\"hljs-string\">'password'<\/span>] = ttk.Entry(show=<span class=\"hljs-string\">\"*\"<\/span>)\r\n\r\n\r\n<span class=\"hljs-keyword\">for<\/span> field <span class=\"hljs-keyword\">in<\/span> fields.values():\r\n    field.pack(anchor=tk.W, padx=<span class=\"hljs-number\">10<\/span>, pady=<span class=\"hljs-number\">5<\/span>, fill=tk.X)\r\n\r\nttk.Button(text=<span class=\"hljs-string\">'Login'<\/span>).pack(anchor=tk.W, padx=<span class=\"hljs-number\">10<\/span>, pady=<span class=\"hljs-number\">5<\/span>)\r\n\r\nroot.mainloop()\r\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-13\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img decoding=\"async\" loading=\"lazy\" width=\"352\" height=\"266\" src=\"https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2022\/09\/tkinter-pack-login-form.png\" alt=\"\" class=\"wp-image-4617\" srcset=\"https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2022\/09\/tkinter-pack-login-form.png 352w, https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2022\/09\/tkinter-pack-login-form-300x227.png 300w\" sizes=\"(max-width: 352px) 100vw, 352px\" \/><\/figure>\n\n\n\n<p>How it works.<\/p>\n\n\n\n<p>First, initialize a dictionary to store the widgets:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">fields = {}<\/code><\/span><\/pre>\n\n\n<p>Second, create Label and Entry widgets:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-14\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">fields&#91;<span class=\"hljs-string\">'username_label'<\/span>] = ttk.Label(text=<span class=\"hljs-string\">'Username:'<\/span>)\nfields&#91;<span class=\"hljs-string\">'username'<\/span>] = ttk.Entry()\n\nfields&#91;<span class=\"hljs-string\">'password_label'<\/span>] = ttk.Label(text=<span class=\"hljs-string\">'Password:'<\/span>)\nfields&#91;<span class=\"hljs-string\">'password'<\/span>] = ttk.Entry(show=<span class=\"hljs-string\">\"*\"<\/span>)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-14\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Third, iterate through the widgets and pack them:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">for field in fields.values():\r\n    field.pack(anchor=tk.W, padx=10, pady=5, fill=tk.X)<\/code><\/span><\/pre>\n\n\n<p>Finally, add the login button:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-15\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">ttk.Button(text=<span class=\"hljs-string\">'Login'<\/span>).pack(anchor=tk.W, padx=<span class=\"hljs-number\">10<\/span>, pady=<span class=\"hljs-number\">5<\/span>)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-15\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2>Summary<\/h2>\n\n\n\n<ul><li>Use Tkinter pack geometry manager to arrange widgets in a top-down layout or side by side.<\/li><li>Use the <code>fill<\/code>, <code>expand<\/code>, and <code>side<\/code> options of pack geometry manager to control how widgets are arranged.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Did you find this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"1286\"\n\t\t\t\tdata-post-url=\"https:\/\/www.pythontutorial.net\/tkinter\/tkinter-pack\/\"\n\t\t\t\tdata-post-title=\"Tkinter Pack\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"1286\"\n\t\t\t\tdata-post-url=\"https:\/\/www.pythontutorial.net\/tkinter\/tkinter-pack\/\"\n\t\t\t\tdata-post-title=\"Tkinter Pack\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you&#8217;ll learn about the Tkinter pack geometry manager and how to use it to arrange widgets on a window.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":1232,"menu_order":9,"comment_status":"closed","ping_status":"closed","template":"","meta":[],"_links":{"self":[{"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/pages\/1286"}],"collection":[{"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/comments?post=1286"}],"version-history":[{"count":4,"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/pages\/1286\/revisions"}],"predecessor-version":[{"id":4618,"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/pages\/1286\/revisions\/4618"}],"up":[{"embeddable":true,"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/pages\/1232"}],"wp:attachment":[{"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/media?parent=1286"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}