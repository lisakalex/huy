{"id":4746,"date":"2022-09-13T04:49:03","date_gmt":"2022-09-13T04:49:03","guid":{"rendered":"https:\/\/www.pythontutorial.net\/?page_id=4746"},"modified":"2022-09-13T04:50:27","modified_gmt":"2022-09-13T04:50:27","slug":"python-all","status":"publish","type":"page","link":"https:\/\/www.pythontutorial.net\/python-built-in-functions\/python-all\/","title":{"rendered":"Python all"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you will learn how to use the Python <code>all()<\/code> function to check if all elements of an iterable are true.<\/p>\n\n\n\n<h2>Introduction to the Python all() function<\/h2>\n\n\n\n<p>The Python <code>all()<\/code> function accepts an <a href=\"https:\/\/www.pythontutorial.net\/python-basics\/python-iterables\/\">iterable<\/a> and returns <code>True<\/code> if all elements of the iterable are <code>True<\/code>. It also returns <code>True<\/code> if the iterable is empty.<\/p>\n\n\n\n<p>Here&#8217;s the syntax of the <code>all()<\/code> function:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">all(iterable)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The following example illustrates <code>all()<\/code> functions:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">mask = &#91;<span class=\"hljs-literal\">True<\/span>, <span class=\"hljs-literal\">True<\/span>, <span class=\"hljs-literal\">False<\/span>]\nresult = all(mask)\nprint(result)  <span class=\"hljs-comment\"># \ud83d\udc49 False<\/span>\n\nmask = &#91;<span class=\"hljs-literal\">True<\/span>, <span class=\"hljs-literal\">True<\/span>, <span class=\"hljs-literal\">True<\/span>]\nresult = all(mask)\nprint(result)  <span class=\"hljs-comment\"># \ud83d\udc49 True<\/span>\n\nresult = all(&#91;])\nprint(result)  <span class=\"hljs-comment\"># \ud83d\udc49 True<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>How it works.<\/p>\n\n\n\n<ul><li>First, <code>[True, True, False]<\/code> has an element with the value <code>False<\/code>, the <code>all()<\/code> function returns <code>False<\/code>.<\/li><li>Second, <code>[True, True, True]<\/code> has all elements with value <code>True<\/code>, the <code>all()<\/code> function returns <code>True<\/code>.<\/li><li>Third, <code>[]<\/code> is an empty iterable, therefore, the <code>all()<\/code> function also returns <code>True<\/code>.<\/li><\/ul>\n\n\n\n<h2>Practical examples of the all() function<\/h2>\n\n\n\n<p>Let&#8217;s take some practical examples of using the <code>all()<\/code> function.<\/p>\n\n\n\n<h3>1) Using Python all() function to make a complex condition more simple<\/h3>\n\n\n\n<p>The following example checks if the <a href=\"https:\/\/www.pythontutorial.net\/python-built-in-functions\/python-len\/\">length<\/a> of <code>v<\/code> is greater than zero and less than 25 and if it contains only alphanumeric characters:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">v = <span class=\"hljs-string\">'Python'<\/span>\n<span class=\"hljs-keyword\">if<\/span> len(v) &gt; <span class=\"hljs-number\">0<\/span> <span class=\"hljs-keyword\">and<\/span> len(v) &lt; <span class=\"hljs-number\">25<\/span> <span class=\"hljs-keyword\">and<\/span> v.isalnum():\n    print(v)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The condition is quite complex. To make it shorter, you can replace all the <code>and<\/code> operators with the <code>all()<\/code> function like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">v = <span class=\"hljs-string\">'Python'<\/span>\nvalid = all(&#91;len(v) &gt; <span class=\"hljs-number\">0<\/span>, len(v) &lt; <span class=\"hljs-number\">25<\/span>, v.isalnum()])\n<span class=\"hljs-keyword\">if<\/span> valid:\n    print(v)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, The <code>valid<\/code> evaluates to <code>True<\/code> if all the conditions inside the tuple passed to the <code>all()<\/code> the function returns <code>True<\/code>.<\/p>\n\n\n\n<h3>2) Using Python all() function to validate iterables of numbers<\/h3>\n\n\n\n<p>The following example uses the <code>all()<\/code> function to check if all numbers of an iterable are greater than or equal to four:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">ratings = &#91;<span class=\"hljs-number\">3<\/span>, <span class=\"hljs-number\">5<\/span>, <span class=\"hljs-number\">4<\/span>, <span class=\"hljs-number\">2<\/span>, <span class=\"hljs-number\">4<\/span>, <span class=\"hljs-number\">5<\/span>]\nhas_good_rating = all(&#91;rating &gt;= <span class=\"hljs-number\">4<\/span> <span class=\"hljs-keyword\">for<\/span> rating <span class=\"hljs-keyword\">in<\/span> ratings])\nprint(has_good_rating)  <span class=\"hljs-comment\"># false<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>How it works.<\/p>\n\n\n\n<p>First, use a list comprehension to convert the list of ratings to a list of <code>True<\/code> and <code>False<\/code>. The following <\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">&#91;rating &gt;= <span class=\"hljs-number\">4<\/span> <span class=\"hljs-keyword\">for<\/span> rating <span class=\"hljs-keyword\">in<\/span> ratings]<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>returns a list of boolean values:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">&#91;<span class=\"hljs-literal\">False<\/span>, <span class=\"hljs-literal\">True<\/span>, <span class=\"hljs-literal\">True<\/span>, <span class=\"hljs-literal\">False<\/span>, <span class=\"hljs-literal\">True<\/span>, <span class=\"hljs-literal\">True<\/span>]<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Second, pass the result of the list comprehension to <code><code>all()<\/code><\/code> function. So <code><code>all()<\/code><\/code> function returns False because the list contains some False elements.<\/p>\n\n\n\n<h2>Summary<\/h2>\n\n\n\n<ul><li>Use the Python <code>all()<\/code> function to check if all elements of an iterable are true.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Did you find this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"4746\"\n\t\t\t\tdata-post-url=\"https:\/\/www.pythontutorial.net\/python-built-in-functions\/python-all\/\"\n\t\t\t\tdata-post-title=\"Python all\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"4746\"\n\t\t\t\tdata-post-url=\"https:\/\/www.pythontutorial.net\/python-built-in-functions\/python-all\/\"\n\t\t\t\tdata-post-title=\"Python all\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>Summary: in this tutorial, you will learn how to use the Python all() function to check if all elements of an iterable are true. Introduction to the Python all() function The Python all() function accepts an iterable and returns True if all elements of the iterable are True. It also returns True if the iterable [&hellip;]<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":1055,"menu_order":0,"comment_status":"closed","ping_status":"closed","template":"","meta":[],"_links":{"self":[{"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/pages\/4746"}],"collection":[{"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/comments?post=4746"}],"version-history":[{"count":3,"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/pages\/4746\/revisions"}],"predecessor-version":[{"id":4749,"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/pages\/4746\/revisions\/4749"}],"up":[{"embeddable":true,"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/pages\/1055"}],"wp:attachment":[{"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/media?parent=4746"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}