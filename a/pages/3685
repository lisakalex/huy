{"id":3685,"date":"2022-07-06T00:57:27","date_gmt":"2022-07-06T00:57:27","guid":{"rendered":"https:\/\/www.pythontutorial.net\/?page_id=3685"},"modified":"2022-07-09T07:47:52","modified_gmt":"2022-07-09T07:47:52","slug":"python-unittest-subtest","status":"publish","type":"page","link":"https:\/\/www.pythontutorial.net\/python-unit-testing\/python-unittest-subtest\/","title":{"rendered":"Python unittest subtest"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you&#8217;ll learn how to define parameterized tests using <a href=\"https:\/\/www.pythontutorial.net\/python-unit-testing\/python-unittest\/\">unittest<\/a>&#8216;s <code>subTest()<\/code> context manager.<\/p>\n\n\n\n<h2>Introduction to the unittest subtest context manager<\/h2>\n\n\n\n<p>First, create a <a href=\"https:\/\/www.pythontutorial.net\/python-oop\/what-is-a-python-module\/\">new module<\/a> called <code>pricing.py<\/code> and define a <code>calculate()<\/code> function as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">calculate<\/span><span class=\"hljs-params\">(price, tax=<span class=\"hljs-number\">0<\/span>, discount=<span class=\"hljs-number\">0<\/span>)<\/span>:<\/span>\n    <span class=\"hljs-keyword\">return<\/span> round((price - discount) * (<span class=\"hljs-number\">1<\/span>+tax), <span class=\"hljs-number\">2<\/span>)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>calculate()<\/code> function calculates the net price from the price, tax, and discount.<\/p>\n\n\n\n<p>Second, create the <code>test_pricing.py<\/code> test module to test the <code>calculate()<\/code> function:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import<\/span> unittest\n\n<span class=\"hljs-keyword\">from<\/span> pricing <span class=\"hljs-keyword\">import<\/span> calculate\n\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">TestPricing<\/span><span class=\"hljs-params\">(unittest.TestCase)<\/span>:<\/span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">test_calculate<\/span><span class=\"hljs-params\">(self)<\/span>:<\/span>\n        <span class=\"hljs-keyword\">pass<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>To test the <code>calculate()<\/code> function, you need to come up with multiple test cases, for example:<\/p>\n\n\n\n<ul><li>Has price with no tax and no discount<\/li><li>Has price with tax but no discount <\/li><li>Has price with no tax and discount<\/li><li>Has price with tax and discount<\/li><\/ul>\n\n\n\n<p>To cover these cases, you need to have various test methods.  Or you can define a single test method and supply test data from a list of cases. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import<\/span> unittest\n\n<span class=\"hljs-keyword\">from<\/span> pricing <span class=\"hljs-keyword\">import<\/span> calculate\n\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">TestPricing<\/span><span class=\"hljs-params\">(unittest.TestCase)<\/span>:<\/span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">test_calculate<\/span><span class=\"hljs-params\">(self)<\/span>:<\/span>\n        items = (\n            {<span class=\"hljs-string\">'case'<\/span>: <span class=\"hljs-string\">'No tax, no discount'<\/span>, <span class=\"hljs-string\">'price'<\/span>: <span class=\"hljs-number\">10<\/span>, <span class=\"hljs-string\">'tax'<\/span>: <span class=\"hljs-number\">0<\/span>, <span class=\"hljs-string\">'discount'<\/span>: <span class=\"hljs-number\">0<\/span>, <span class=\"hljs-string\">'net_price'<\/span>: <span class=\"hljs-number\">10<\/span>},\n            {<span class=\"hljs-string\">'case'<\/span>: <span class=\"hljs-string\">'Has tax, no discount'<\/span>, <span class=\"hljs-string\">'price'<\/span>: <span class=\"hljs-number\">10<\/span>, <span class=\"hljs-string\">'tax'<\/span>: <span class=\"hljs-number\">0.1<\/span>, <span class=\"hljs-string\">'discount'<\/span>: <span class=\"hljs-number\">0<\/span>, <span class=\"hljs-string\">'net_price'<\/span>: <span class=\"hljs-number\">10<\/span>},\n            {<span class=\"hljs-string\">'case'<\/span>: <span class=\"hljs-string\">'No tax, has discount'<\/span>, <span class=\"hljs-string\">'price'<\/span>: <span class=\"hljs-number\">10<\/span>, <span class=\"hljs-string\">'tax'<\/span>: <span class=\"hljs-number\">0<\/span>, <span class=\"hljs-string\">'discount'<\/span>: <span class=\"hljs-number\">1<\/span>, <span class=\"hljs-string\">'net_price'<\/span>: <span class=\"hljs-number\">10<\/span>},\n            {<span class=\"hljs-string\">'case'<\/span>: <span class=\"hljs-string\">'Has tax, has discount'<\/span>, <span class=\"hljs-string\">'price'<\/span>: <span class=\"hljs-number\">10<\/span>, <span class=\"hljs-string\">'tax'<\/span>: <span class=\"hljs-number\">0.1<\/span>, <span class=\"hljs-string\">'discount'<\/span>: <span class=\"hljs-number\">1<\/span>, <span class=\"hljs-string\">'net_price'<\/span>: <span class=\"hljs-number\">9.9<\/span>},\n        )\n\n        <span class=\"hljs-keyword\">for<\/span> item <span class=\"hljs-keyword\">in<\/span> items:\n            <span class=\"hljs-keyword\">with<\/span> self.subTest(item&#91;<span class=\"hljs-string\">'case'<\/span>]):\n                net_price = calculate(\n                    item&#91;<span class=\"hljs-string\">'price'<\/span>],\n                    item&#91;<span class=\"hljs-string\">'tax'<\/span>],\n                    item&#91;<span class=\"hljs-string\">'discount'<\/span>]\n                )\n                self.assertEqual(\n                    net_price,\n                    item&#91;<span class=\"hljs-string\">'net_price'<\/span>]\n                )<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Run the test:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">python -m unittest test_pricing -v<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"plaintext\" data-shcb-language-slug=\"plaintext\"><span><code class=\"hljs language-plaintext\">test_calculate (test_pricing.TestPricing) ... FAIL\n\n======================================================================     \nFAIL: test_calculate (test_pricing.TestPricing)\n----------------------------------------------------------------------     \nTraceback (most recent call last):\n  File \"D:\\python-unit-testing\\test_pricing.py\", line 26, in test_calculate\n    self.assertEqual(\nAssertionError: 11.0 != 10\n\n----------------------------------------------------------------------\nRan 1 test in 0.002s\n\nFAILED (failures=1)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">plaintext<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">plaintext<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The problem with this approach is that the test stops after the first failure. To resolve this, the unittest provides you with the <code>subTest()<\/code> context manager. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import<\/span> unittest\n\n<span class=\"hljs-keyword\">from<\/span> pricing <span class=\"hljs-keyword\">import<\/span> calculate\n\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">TestPricing<\/span><span class=\"hljs-params\">(unittest.TestCase)<\/span>:<\/span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">test_calculate<\/span><span class=\"hljs-params\">(self)<\/span>:<\/span>\n        items = (\n            {<span class=\"hljs-string\">'case'<\/span>: <span class=\"hljs-string\">'No tax, no discount'<\/span>, <span class=\"hljs-string\">'price'<\/span>: <span class=\"hljs-number\">10<\/span>, <span class=\"hljs-string\">'tax'<\/span>: <span class=\"hljs-number\">0<\/span>, <span class=\"hljs-string\">'discount'<\/span>: <span class=\"hljs-number\">0<\/span>, <span class=\"hljs-string\">'net_price'<\/span>: <span class=\"hljs-number\">10<\/span>},\n            {<span class=\"hljs-string\">'case'<\/span>: <span class=\"hljs-string\">'Has tax, no discount'<\/span>, <span class=\"hljs-string\">'price'<\/span>: <span class=\"hljs-number\">10<\/span>, <span class=\"hljs-string\">'tax'<\/span>: <span class=\"hljs-number\">0.1<\/span>, <span class=\"hljs-string\">'discount'<\/span>: <span class=\"hljs-number\">0<\/span>, <span class=\"hljs-string\">'net_price'<\/span>: <span class=\"hljs-number\">10<\/span>},\n            {<span class=\"hljs-string\">'case'<\/span>: <span class=\"hljs-string\">'No tax, has discount'<\/span>, <span class=\"hljs-string\">'price'<\/span>: <span class=\"hljs-number\">10<\/span>, <span class=\"hljs-string\">'tax'<\/span>: <span class=\"hljs-number\">0<\/span>, <span class=\"hljs-string\">'discount'<\/span>: <span class=\"hljs-number\">1<\/span>, <span class=\"hljs-string\">'net_price'<\/span>: <span class=\"hljs-number\">10<\/span>},\n            {<span class=\"hljs-string\">'case'<\/span>: <span class=\"hljs-string\">'Has tax, has discount'<\/span>, <span class=\"hljs-string\">'price'<\/span>: <span class=\"hljs-number\">10<\/span>, <span class=\"hljs-string\">'tax'<\/span>: <span class=\"hljs-number\">0.1<\/span>, <span class=\"hljs-string\">'discount'<\/span>: <span class=\"hljs-number\">1<\/span>, <span class=\"hljs-string\">'net_price'<\/span>: <span class=\"hljs-number\">9.9<\/span>},\n        )\n\n        <span class=\"hljs-keyword\">for<\/span> item <span class=\"hljs-keyword\">in<\/span> items:\n            <span class=\"hljs-keyword\">with<\/span> self.subTest(item&#91;<span class=\"hljs-string\">'case'<\/span>]):\n                net_price = calculate(\n                    item&#91;<span class=\"hljs-string\">'price'<\/span>],\n                    item&#91;<span class=\"hljs-string\">'tax'<\/span>],\n                    item&#91;<span class=\"hljs-string\">'discount'<\/span>]\n                )\n                self.assertEqual(\n                    net_price,\n                    item&#91;<span class=\"hljs-string\">'net_price'<\/span>]\n                )<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Run the test:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">python -m unittest test_pricing -v<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"plaintext\" data-shcb-language-slug=\"plaintext\"><span><code class=\"hljs language-plaintext\">test_calculate (test_pricing.TestPricing) ... \n======================================================================     \nFAIL: test_calculate (test_pricing.TestPricing) &#91;Has tax, no discount]     \n----------------------------------------------------------------------     \nTraceback (most recent call last):\n  File \"D:\\python-unit-testing\\test_pricing.py\", line 26, in test_calculate\n    self.assertEqual(\nAssertionError: 11.0 != 10\n\n======================================================================     \nFAIL: test_calculate (test_pricing.TestPricing) &#91;No tax, has discount]     \n----------------------------------------------------------------------     \nTraceback (most recent call last):\n  File \"D:\\python-unit-testing\\test_pricing.py\", line 26, in test_calculate\n    self.assertEqual(\nAssertionError: 9 != 10\n\n----------------------------------------------------------------------     \nRan 1 test in 0.001s\n\nFAILED (failures=2)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">plaintext<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">plaintext<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>By using the <code>subTest()<\/code> context manager, the test didn&#8217;t stop after the first failure. Also, it shows a very detailed message after each failure so that you can examine the case.<\/p>\n\n\n\n<h2>The subTest() context manager syntax<\/h2>\n\n\n\n<p>The following shows the <code>subTest()<\/code> context manager syntax:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">subTest<\/span><span class=\"hljs-params\">(self, msg=_subtest_msg_sentinel, **params)<\/span>:<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>subTest()<\/code> returns a context manager. The optional <code>message<\/code> parameter identifies the closed block of the subtest returned by the context manager.<\/p>\n\n\n\n<p>If a failure occurs, it&#8217;ll mark the test case as failed. However, it resumes execution at the end of the enclosed block, allowing further test code to be executed.<\/p>\n\n\n\n<h2>Summary<\/h2>\n\n\n\n<ul><li>Use the unittest <code>subTest()<\/code> context manager to parameterize tests.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Did you find this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"3685\"\n\t\t\t\tdata-post-url=\"https:\/\/www.pythontutorial.net\/python-unit-testing\/python-unittest-subtest\/\"\n\t\t\t\tdata-post-title=\"Python unittest subtest\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"3685\"\n\t\t\t\tdata-post-url=\"https:\/\/www.pythontutorial.net\/python-unit-testing\/python-unittest-subtest\/\"\n\t\t\t\tdata-post-title=\"Python unittest subtest\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you&#8217;ll learn how to define parameterized tests using unittest&#8217;s subTest() context manager.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":3553,"menu_order":16,"comment_status":"closed","ping_status":"closed","template":"","meta":[],"_links":{"self":[{"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/pages\/3685"}],"collection":[{"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/comments?post=3685"}],"version-history":[{"count":5,"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/pages\/3685\/revisions"}],"predecessor-version":[{"id":4064,"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/pages\/3685\/revisions\/4064"}],"up":[{"embeddable":true,"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/pages\/3553"}],"wp:attachment":[{"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/media?parent=3685"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}