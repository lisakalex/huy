{"id":3039,"date":"2021-11-24T02:34:59","date_gmt":"2021-11-24T02:34:59","guid":{"rendered":"https:\/\/www.pythontutorial.net\/?page_id=3039"},"modified":"2021-11-24T02:48:37","modified_gmt":"2021-11-24T02:48:37","slug":"python-protocol","status":"publish","type":"page","link":"https:\/\/www.pythontutorial.net\/python-oop\/python-protocol\/","title":{"rendered":"Python Protocol"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you&#8217;ll learn about the Python Protocol and its use to define implicit interfaces.<\/p>\n\n\n\n<h2>Introduction to the Python Protocol<\/h2>\n\n\n\n<p>Suppose you have a <a href=\"https:\/\/www.pythontutorial.net\/python-basics\/python-functions\/\">function<\/a> that calculates the total value of a product list, where each product has the name, quantity, and price attributes:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from<\/span> typing <span class=\"hljs-keyword\">import<\/span> List\n\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Product<\/span>:<\/span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">__init__<\/span><span class=\"hljs-params\">(self, name: str, quantity: float, price: float)<\/span>:<\/span>\n        self.name = name\n        self.quantity = quantity\n        self.price = price\n\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">calculate_total<\/span><span class=\"hljs-params\">(items: List&#91;Product])<\/span> -&gt; float:<\/span>\n    <span class=\"hljs-keyword\">return<\/span> sum(&#91;item.quantity * item.price <span class=\"hljs-keyword\">for<\/span> item <span class=\"hljs-keyword\">in<\/span> items])<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, the <code>calculate_total()<\/code> function accepts a list of <code>Product<\/code> objects and returns the total value.<\/p>\n\n\n\n<p>When writing this function, you may want to calculate the total of a product list. But you likely want to use it for other lists such as inventory lists in the future.<\/p>\n\n\n\n<p>If you look closely at the <code>calculate_total()<\/code> function, it only uses the quantity and price attributes.<\/p>\n\n\n\n<p>To make the calculate_total() more dynamic while leveraging <a href=\"https:\/\/www.pythontutorial.net\/python-basics\/python-type-hints\/\">type hints<\/a>, you can use the <code>Protocol<\/code> from the <code>typing<\/code> module. The Protocol class has been available since Python 3.8, described in <a href=\"https:\/\/www.python.org\/dev\/peps\/pep-0544\/#using-protocols\">PEP 544<\/a>.<\/p>\n\n\n\n<p>The following describes how to use the <code>Protocol<\/code> class.<\/p>\n\n\n\n<p>First, define an <code>Item<\/code> class that inherits from the <code>Protocol<\/code> with two attributes: quantity and price:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Item<\/span><span class=\"hljs-params\">(Protocol)<\/span>:<\/span>\n    quantity: float\n    price: float<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Second, change the <code>calculate_total()<\/code> function that accepts a list of <code>Item<\/code> objects instead of a list of <code>Product<\/code> objects:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">calculate_total<\/span><span class=\"hljs-params\">(items: List&#91;Item])<\/span> -&gt; float:<\/span>\n    <span class=\"hljs-keyword\">return<\/span> sum(&#91;item.quantity * item.price <span class=\"hljs-keyword\">for<\/span> item <span class=\"hljs-keyword\">in<\/span> items])<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>By doing this, you can pass any list of <code>Item<\/code> objects to the <code>calculate_total()<\/code> function with the condition that each item has two attributes quantity and price.<\/p>\n\n\n\n<p>The following shows a complete program:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from<\/span> typing <span class=\"hljs-keyword\">import<\/span> List, Protocol\n\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Item<\/span><span class=\"hljs-params\">(Protocol)<\/span>:<\/span>\n    quantity: float\n    price: float\n\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Product<\/span>:<\/span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">__init__<\/span><span class=\"hljs-params\">(self, name: str, quantity: float, price: float)<\/span>:<\/span>\n        self.name = name\n        self.quantity = quantity\n        self.price = price\n\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">calculate_total<\/span><span class=\"hljs-params\">(items: List&#91;Item])<\/span> -&gt; float:<\/span>\n    <span class=\"hljs-keyword\">return<\/span> sum(&#91;item.quantity * item.price <span class=\"hljs-keyword\">for<\/span> item <span class=\"hljs-keyword\">in<\/span> items])\n\n\n<span class=\"hljs-comment\"># calculate total a product list<\/span>\ntotal = calculate_total(&#91;\n    Product(<span class=\"hljs-string\">'A'<\/span>, <span class=\"hljs-number\">10<\/span>, <span class=\"hljs-number\">150<\/span>),\n    Product(<span class=\"hljs-string\">'B'<\/span>, <span class=\"hljs-number\">5<\/span>, <span class=\"hljs-number\">250<\/span>)\n])\n\nprint(total)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>For example, you can define a list of stocks in inventory and pass them to the <code>calculate_total()<\/code> function:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">\n<span class=\"hljs-comment\"># ...<\/span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Stock<\/span>:<\/span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">__init__<\/span><span class=\"hljs-params\">(self, product_name, quantity, price)<\/span>:<\/span>\n        self.product_name = product_name\n        self.quantity = quantity\n        self.price = price\n\n\n<span class=\"hljs-comment\"># calculate total an inventory list<\/span>\ntotal = calculate_total(&#91;\n    Stock(<span class=\"hljs-string\">'Tablet'<\/span>, <span class=\"hljs-number\">5<\/span>, <span class=\"hljs-number\">950<\/span>),\n    Stock(<span class=\"hljs-string\">'Laptop'<\/span>, <span class=\"hljs-number\">10<\/span>, <span class=\"hljs-number\">850<\/span>)\n])\n\nprint(total)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, the <code>Product<\/code> and <code>Stock<\/code> class don&#8217;t need to subclass the <code>Item<\/code> class but still can be used in the <code>calculate_total()<\/code> function.<\/p>\n\n\n\n<p>This is called duck typing in Python. In duck typing, the behaviors and properties of an object determine the object type, not the explicit type of the object.<\/p>\n\n\n\n<p>For example, an object with the quantity and price will follow the <code>Item<\/code> protocol, regardless of its explicit type.<\/p>\n\n\n\n<p>The duck typing is inspired by the duck test:<\/p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>If it walks like a duck and its quacks like a duck, then it must be a duck.<\/p><\/blockquote>\n\n\n\n<p>In practice, when you write a function that accepts input, you care more about the behaviors and properties of the input, not its explicit type.<\/p>\n\n\n\n<h2>Summary<\/h2>\n\n\n\n<ul><li>Use Python Protocol to define implicit interfaces.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Did you find this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"3039\"\n\t\t\t\tdata-post-url=\"https:\/\/www.pythontutorial.net\/python-oop\/python-protocol\/\"\n\t\t\t\tdata-post-title=\"Python Protocol\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"3039\"\n\t\t\t\tdata-post-url=\"https:\/\/www.pythontutorial.net\/python-oop\/python-protocol\/\"\n\t\t\t\tdata-post-title=\"Python Protocol\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you&#8217;ll learn about the Python Protocol and how to use it to create interfaces.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":417,"menu_order":26,"comment_status":"closed","ping_status":"closed","template":"","meta":[],"_links":{"self":[{"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/pages\/3039"}],"collection":[{"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/comments?post=3039"}],"version-history":[{"count":5,"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/pages\/3039\/revisions"}],"predecessor-version":[{"id":3047,"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/pages\/3039\/revisions\/3047"}],"up":[{"embeddable":true,"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/pages\/417"}],"wp:attachment":[{"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/media?parent=3039"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}