{"id":5779,"date":"2022-11-24T08:14:55","date_gmt":"2022-11-24T08:14:55","guid":{"rendered":"https:\/\/www.pythontutorial.net\/?page_id=5779"},"modified":"2023-01-20T06:51:26","modified_gmt":"2023-01-20T06:51:26","slug":"django-models","status":"publish","type":"page","link":"https:\/\/www.pythontutorial.net\/django-tutorial\/django-models\/","title":{"rendered":"Django Models"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you&#8217;ll learn about Django models and how to create models for your Django application.<\/p>\n\n\n\n<p class=\"note\">This tutorial begins where&nbsp;<a href=\"https:\/\/www.pythontutorial.net\/django-tutorial\/django-templates\/\">creating Django templates tutorial<\/a> left off.<\/p>\n\n\n\n<h2>Introduction to Django models<\/h2>\n\n\n\n<p>In Django, a model is a subclass of the <code>django.db.models.Model<\/code> class. A model contains one or more fields and methods that manipulate the fields.<\/p>\n\n\n\n<p>Essentially, a Django model maps to a single table in the database in which each field of the model represents a column in the table.<\/p>\n\n\n\n<p>An application may have zero or more models stored in <code>models.py<\/code> module. For example, the following defines a <code>Post<\/code> model for the <code>blog<\/code> application:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from<\/span> django.db <span class=\"hljs-keyword\">import<\/span> models\n<span class=\"hljs-keyword\">from<\/span> django.utils <span class=\"hljs-keyword\">import<\/span> timezone\n\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Post<\/span><span class=\"hljs-params\">(models.Model)<\/span>:<\/span>\n    title = models.CharField(max_length=<span class=\"hljs-number\">120<\/span>)\n    content = models.TextField()\n    published_at = models.DateTimeField(default=timezone.now)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>Post<\/code> model has the <code>title<\/code>, <code>content<\/code>, and <code>published_at<\/code> fields. Based on the <code>Post<\/code> model, Django will create a table in the database with the following SQL code:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><span><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">CREATE<\/span> <span class=\"hljs-keyword\">TABLE<\/span> <span class=\"hljs-string\">\"blog_post\"<\/span> (\n  <span class=\"hljs-string\">\"id\"<\/span> <span class=\"hljs-built_in\">integer<\/span> <span class=\"hljs-keyword\">NOT<\/span> <span class=\"hljs-literal\">NULL<\/span> PRIMARY <span class=\"hljs-keyword\">KEY<\/span> AUTOINCREMENT, \n  <span class=\"hljs-string\">\"title\"<\/span> <span class=\"hljs-built_in\">varchar<\/span>(<span class=\"hljs-number\">120<\/span>) <span class=\"hljs-keyword\">NOT<\/span> <span class=\"hljs-literal\">NULL<\/span>, \n  <span class=\"hljs-string\">\"content\"<\/span> <span class=\"hljs-built_in\">text<\/span> <span class=\"hljs-keyword\">NOT<\/span> <span class=\"hljs-literal\">NULL<\/span>, \n  <span class=\"hljs-string\">\"published_at\"<\/span> datetime <span class=\"hljs-keyword\">NOT<\/span> <span class=\"hljs-literal\">NULL<\/span>, \n);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p class=\"note\">Note that the above-generated <a href=\"https:\/\/www.sqltutorial.org\/\" target=\"_blank\" rel=\"noreferrer noopener\">SQL<\/a> is for <a href=\"https:\/\/www.sqlitetutorial.net\/\" target=\"_blank\" rel=\"noreferrer noopener\">SQLite<\/a>. If you use a different database, you&#8217;ll see that the SQL code is slightly different.<\/p>\n\n\n\n<p>The name of the table <code>blog_post<\/code> is automatically derived from the application and model names:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">application.model<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, Django will create a table <code>blog_post<\/code> for the <code>Post<\/code> model.<\/p>\n\n\n\n<p>To specify a table name instead of using the default name generated by Django, you can use the <code>db_table<\/code> attribute of the <code>Meta<\/code> class like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python shcb-code-table\"><span class='shcb-loc'><span><span class=\"hljs-keyword\">from<\/span> django.db <span class=\"hljs-keyword\">import<\/span> models\n<\/span><\/span><span class='shcb-loc'><span><span class=\"hljs-keyword\">from<\/span> django.utils <span class=\"hljs-keyword\">import<\/span> timezone\n<\/span><\/span><span class='shcb-loc'><span>\n<\/span><\/span><span class='shcb-loc'><span>\n<\/span><\/span><span class='shcb-loc'><span><span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Post<\/span><span class=\"hljs-params\">(models.Model)<\/span>:<\/span>\n<\/span><\/span><span class='shcb-loc'><span>    title = models.CharField(max_length=<span class=\"hljs-number\">120<\/span>)\n<\/span><\/span><span class='shcb-loc'><span>    content = models.TextField()\n<\/span><\/span><span class='shcb-loc'><span>    published_at = models.DateTimeField(default=timezone.now)\n<\/span><\/span><span class='shcb-loc'><span>    \n<\/span><\/span><span class='shcb-loc'><span>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Meta<\/span>:<\/span>\n<\/span><\/span><mark class='shcb-loc'><span>        db_table = <span class=\"hljs-string\">'posts'<\/span>\n<\/span><\/mark><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this case, the <code>Post<\/code> model will map to the <code>posts<\/code> table instead of the generated <code>blog_post<\/code> table. In this tutorial, we&#8217;ll sticky with the default generated table name <code>blog_post<\/code>.<\/p>\n\n\n\n<p>When creating a table, Django automatically adds the <code>id<\/code> field as the primary key of the table. The <code>id<\/code> field is an auto-increment field with the type specified in the <code>settings.py<\/code> file of the project:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">DEFAULT_AUTO_FIELD = <span class=\"hljs-string\">'django.db.models.BigAutoField'<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>If you want to specify your own primary key field, you need to explicitly define it in the model like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">post_id = models.BigAutoField(primary_key=<span class=\"hljs-literal\">True<\/span>)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, the <code>primary_key=True<\/code> indicates that the <code>post_id<\/code> is a <a href=\"https:\/\/www.sqlitetutorial.net\/sqlite-primary-key\/\" target=\"_blank\" rel=\"noreferrer noopener\">primary key<\/a>. When Django sees a field in the model with the <code>primary_key=True<\/code>, it won&#8217;t add the automatic <code>id<\/code> column.<\/p>\n\n\n\n<p>Django requires each model to have <strong>exactly one field<\/strong> with the <code>primary_key=True<\/code>.<\/p>\n\n\n\n<h3>Using models<\/h3>\n\n\n\n<p>Once defining models, you need to tell Django that you&#8217;re going to use them by registering the application name in the <code>INSTALLED_APPS<\/code> list in the <code>settings.py<\/code> of the project:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">INSTALLED_APPS = &#91;\n    <span class=\"hljs-comment\"># ...<\/span>\n    <span class=\"hljs-string\">'blog'<\/span>,\n]<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3>Built-in models<\/h3>\n\n\n\n<p>Django comes with some built-in models like <code>User<\/code> from <code>django.contrib.auth.models<\/code> module. To use the <code>User<\/code> model, you need to import it into the <code>models.py<\/code> file:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from<\/span> django.contrib.auth.models <span class=\"hljs-keyword\">import<\/span> User<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3>Foreign keys<\/h3>\n\n\n\n<p>Each post in the <code>blog<\/code> application is created by a user and a user may create zero or more posts. This is called a one-to-many relationship. <\/p>\n\n\n\n<p>To model the one-to-many relationship, you use the <code>ForeignKey<\/code> field:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python shcb-code-table\"><span class='shcb-loc'><span><span class=\"hljs-keyword\">from<\/span> django.db <span class=\"hljs-keyword\">import<\/span> models\n<\/span><\/span><span class='shcb-loc'><span><span class=\"hljs-keyword\">from<\/span> django.utils <span class=\"hljs-keyword\">import<\/span> timezone\n<\/span><\/span><span class='shcb-loc'><span><span class=\"hljs-keyword\">from<\/span> django.contrib.auth.models <span class=\"hljs-keyword\">import<\/span> User\n<\/span><\/span><span class='shcb-loc'><span>\n<\/span><\/span><span class='shcb-loc'><span>\n<\/span><\/span><span class='shcb-loc'><span><span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Post<\/span><span class=\"hljs-params\">(models.Model)<\/span>:<\/span>\n<\/span><\/span><span class='shcb-loc'><span>    title = models.CharField(max_length=<span class=\"hljs-number\">120<\/span>)\n<\/span><\/span><span class='shcb-loc'><span>    content = models.TextField()\n<\/span><\/span><span class='shcb-loc'><span>    published_at = models.DateTimeField(default=timezone.now)\n<\/span><\/span><mark class='shcb-loc'><span>    author = models.ForeignKey(User, on_delete=models.CASCADE)\n<\/span><\/mark><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Based on this model, Django will create the <code>blog_post<\/code> table with the following structure:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"SQL (Structured Query Language)\" data-shcb-language-slug=\"sql\"><span><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">CREATE<\/span> <span class=\"hljs-keyword\">TABLE<\/span> <span class=\"hljs-string\">\"blog_post\"<\/span> (\n  <span class=\"hljs-string\">\"id\"<\/span> <span class=\"hljs-built_in\">integer<\/span> <span class=\"hljs-keyword\">NOT<\/span> <span class=\"hljs-literal\">NULL<\/span> PRIMARY <span class=\"hljs-keyword\">KEY<\/span> AUTOINCREMENT, \n  <span class=\"hljs-string\">\"title\"<\/span> <span class=\"hljs-built_in\">varchar<\/span>(<span class=\"hljs-number\">120<\/span>) <span class=\"hljs-keyword\">NOT<\/span> <span class=\"hljs-literal\">NULL<\/span>, \n  <span class=\"hljs-string\">\"content\"<\/span> <span class=\"hljs-built_in\">text<\/span> <span class=\"hljs-keyword\">NOT<\/span> <span class=\"hljs-literal\">NULL<\/span>, \n  <span class=\"hljs-string\">\"published_at\"<\/span> datetime <span class=\"hljs-keyword\">NOT<\/span> <span class=\"hljs-literal\">NULL<\/span>, \n  <span class=\"hljs-string\">\"author_id\"<\/span> <span class=\"hljs-built_in\">integer<\/span> <span class=\"hljs-keyword\">NOT<\/span> <span class=\"hljs-literal\">NULL<\/span> \n   <span class=\"hljs-keyword\">REFERENCES<\/span> <span class=\"hljs-string\">\"auth_user\"<\/span> (<span class=\"hljs-string\">\"id\"<\/span>) \n   DEFERRABLE <span class=\"hljs-keyword\">INITIALLY<\/span> <span class=\"hljs-keyword\">DEFERRED<\/span>\n);<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">SQL (Structured Query Language)<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">sql<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, the <code>auth_id<\/code> is a <a href=\"https:\/\/www.sqlitetutorial.net\/sqlite-foreign-key\/\" target=\"_blank\" rel=\"noreferrer noopener\">foreign key<\/a> that creates a relationship between <code>blog_post<\/code> table and <code>auth_user<\/code> table. Note that the <code>auth_user<\/code> table is the Django-provided table.<\/p>\n\n\n\n<h3>The __str__() method<\/h3>\n\n\n\n<p>To define the string representation of a model, you can override the <code>__str__()<\/code> method. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-11\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from<\/span> django.db <span class=\"hljs-keyword\">import<\/span> models\n<span class=\"hljs-keyword\">from<\/span> django.utils <span class=\"hljs-keyword\">import<\/span> timezone\n<span class=\"hljs-keyword\">from<\/span> django.contrib.auth.models <span class=\"hljs-keyword\">import<\/span> User\n\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Post<\/span><span class=\"hljs-params\">(models.Model)<\/span>:<\/span>\n    title = models.CharField(max_length=<span class=\"hljs-number\">120<\/span>)\n    content = models.TextField()\n    published_at = models.DateTimeField(default=timezone.now)\n    author = models.ForeignKey(User, on_delete=models.CASCADE)\n    \n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">__str__<\/span><span class=\"hljs-params\">(self)<\/span>:<\/span>\n        <span class=\"hljs-keyword\">return<\/span> self.title<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-11\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>When you use the instance of the Post model as a string, Django calls the __str__() method and displays its result.<\/p>\n\n\n\n<h3>Adding Meta class to the Model class<\/h3>\n\n\n\n<p>The Meta class allows you to configure the model. For example, the following defines the <code>Meta<\/code> class inside the <code>Post<\/code> model class that sorts the posts by the <code>published_at<\/code> in descending order (<code>-published_at<\/code>) i.e., the newer posts first and the older posts after.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-12\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from<\/span> django.db <span class=\"hljs-keyword\">import<\/span> models\n<span class=\"hljs-keyword\">from<\/span> django.utils <span class=\"hljs-keyword\">import<\/span> timezone\n<span class=\"hljs-keyword\">from<\/span> django.contrib.auth.models <span class=\"hljs-keyword\">import<\/span> User\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Post<\/span><span class=\"hljs-params\">(models.Model)<\/span>:<\/span>\n    title = models.CharField(max_length=<span class=\"hljs-number\">120<\/span>)\n    content = models.TextField()\n    published_at = models.DateTimeField(default=timezone.now)\n    author = models.ForeignKey(User, on_delete=models.CASCADE)\n    \n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">__str__<\/span><span class=\"hljs-params\">(self)<\/span>:<\/span>\n        <span class=\"hljs-keyword\">return<\/span> self.title\n    \n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Meta<\/span>:<\/span>\n        ordering = &#91;<span class=\"hljs-string\">'-published_at'<\/span>]<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-12\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>After defining models, you can create and apply migrations to create tables in the database, which we&#8217;ll cover in the next tutorial.<\/p>\n\n\n\n<p class=\"note\"><a href=\"https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2023\/01\/django_project_4.zip\" target=\"_blank\" rel=\"noreferrer noopener\">Download the Django Project source code<\/a><\/p>\n\n\n\n<h2>Summary<\/h2>\n\n\n\n<ul>\n<li>Define all models in the <code>models.py<\/code> file of the Django application.<\/li>\n\n\n\n<li>Define a class that inherits from the <code>django.db.models.Model<\/code> to create a model.<\/li>\n\n\n\n<li>A model maps to a table in the database, in which each field maps to a column in the database table.<\/li>\n\n\n\n<li>Override <code>__str__()<\/code> method to return a string representation of a model.<\/li>\n\n\n\n<li>Use the <code>Meta<\/code> class to configure the model.<\/li>\n<\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Did you find this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"5779\"\n\t\t\t\tdata-post-url=\"https:\/\/www.pythontutorial.net\/django-tutorial\/django-models\/\"\n\t\t\t\tdata-post-title=\"Django Models\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"5779\"\n\t\t\t\tdata-post-url=\"https:\/\/www.pythontutorial.net\/django-tutorial\/django-models\/\"\n\t\t\t\tdata-post-title=\"Django Models\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you&#8217;ll learn about Django models and how to create models for your Django applications.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":5531,"menu_order":3,"comment_status":"closed","ping_status":"closed","template":"","meta":[],"_links":{"self":[{"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/pages\/5779"}],"collection":[{"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/comments?post=5779"}],"version-history":[{"count":5,"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/pages\/5779\/revisions"}],"predecessor-version":[{"id":6486,"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/pages\/5779\/revisions\/6486"}],"up":[{"embeddable":true,"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/pages\/5531"}],"wp:attachment":[{"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/media?parent=5779"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}