{"id":5192,"date":"2022-10-10T09:42:02","date_gmt":"2022-10-10T09:42:02","guid":{"rendered":"https:\/\/www.pythontutorial.net\/?page_id=5192"},"modified":"2022-10-11T01:16:33","modified_gmt":"2022-10-11T01:16:33","slug":"pyqt-qtoolbar","status":"publish","type":"page","link":"https:\/\/www.pythontutorial.net\/pyqt\/pyqt-qtoolbar\/","title":{"rendered":"PyQt QToolBar"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you&#8217;ll learn how to use the PyQt <code>QToolBar<\/code> class to create toolbar widgets.<\/p>\n\n\n\n<h2>Introduction to the PyQt QToolBar class<\/h2>\n\n\n\n<p>A toolbar is a movable panel that contains a set of controls. To create a toolbar, you use the <code>QToolBar<\/code> class:<\/p>\n\n\n\n<p>The following creates a new toolbar using the <code>QToolBar<\/code> class and adds it to the main window using the <code>addToolBar()<\/code> method of the <code>QMainWindowObject<\/code>:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">toolbar = QToolBar(<span class=\"hljs-string\">'Main ToolBar'<\/span>)\nself.addToolBar(toolbar)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>setIconSize()<\/code> method of the <code>QToolBar<\/code> object allows you to set the icon size of the icons that appear on the toolbar.<\/p>\n\n\n\n<p>For example, you can set the size of the icons to (16,16). To do so, you pass a <code>QSize<\/code> object to the <code>setIconSize()<\/code> method like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">toolbar.setIconSize(QSize(<span class=\"hljs-number\">16<\/span>, <span class=\"hljs-number\">16<\/span>))<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Typically, you add buttons to the toolbar using the <code>addAction()<\/code> method:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">toolbar.addAction(my_action)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>To separate between groups of buttons on the toolbar, you use the <code>addSeparator()<\/code> method:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">toolbar.addSeparator()<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Besides buttons, you can add widgets to the toolbar using the <code>addWidget()<\/code> method.<\/p>\n\n\n\n<p>A toolbar can be movable between toolbar areas of the main window by default. To make the toolbar fixed in a particular area, you pass False to the <code>setMovable()<\/code> method of the <code>QToolBar<\/code> object.<\/p>\n\n\n\n<p>To set an area for the toolbar, you can use the <code>setAllowedArea()<\/code> method. The allowed areas are top, bottom, left, and right.<\/p>\n\n\n\n<h2>Using the PyQt QToolBar class to create a toolbar<\/h2>\n\n\n\n<p>We&#8217;ll continue the text editor program from the <a href=\"https:\/\/www.pythontutorial.net\/pyqt\/pyqt-qmenu\/\" target=\"_blank\" rel=\"noreferrer noopener\"><code>QMenu<\/code> tutorial<\/a> by creating a toolbar widget:<\/p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img decoding=\"async\" loading=\"lazy\" width=\"750\" height=\"494\" src=\"https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2022\/10\/PyQt-QToolBar.png\" alt=\"\" class=\"wp-image-5194\" srcset=\"https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2022\/10\/PyQt-QToolBar.png 750w, https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2022\/10\/PyQt-QToolBar-300x198.png 300w\" sizes=\"(max-width: 750px) 100vw, 750px\" \/><\/figure>\n\n\n\n<p>The following shows the complete program:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import<\/span> sys\n<span class=\"hljs-keyword\">from<\/span> pathlib <span class=\"hljs-keyword\">import<\/span> Path\n<span class=\"hljs-keyword\">from<\/span> PyQt6.QtWidgets <span class=\"hljs-keyword\">import<\/span> QApplication, QMainWindow, QTextEdit, QFileDialog, QMessageBox, QToolBar\n<span class=\"hljs-keyword\">from<\/span> PyQt6.QtGui <span class=\"hljs-keyword\">import<\/span> QIcon, QAction\n<span class=\"hljs-keyword\">from<\/span> PyQt6.QtCore <span class=\"hljs-keyword\">import<\/span> QSize, Qt\n\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">MainWindow<\/span><span class=\"hljs-params\">(QMainWindow)<\/span>:<\/span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">__init__<\/span><span class=\"hljs-params\">(self, *args, **kwargs)<\/span>:<\/span>\n        super().__init__(*args, **kwargs)\n\n        self.setWindowIcon(QIcon(<span class=\"hljs-string\">'.\/assets\/editor.png'<\/span>))\n        self.setGeometry(<span class=\"hljs-number\">100<\/span>, <span class=\"hljs-number\">100<\/span>, <span class=\"hljs-number\">500<\/span>, <span class=\"hljs-number\">300<\/span>)\n\n        self.title = <span class=\"hljs-string\">'Editor'<\/span>\n        self.filters = <span class=\"hljs-string\">'Text Files (*.txt)'<\/span>\n\n        self.set_title()\n\n        self.path = <span class=\"hljs-literal\">None<\/span>\n\n        self.text_edit = QTextEdit(self)\n        self.setCentralWidget(self.text_edit)\n\n        menu_bar = self.menuBar()\n\n        file_menu = menu_bar.addMenu(<span class=\"hljs-string\">'&amp;File'<\/span>)\n        edit_menu = menu_bar.addMenu(<span class=\"hljs-string\">'&amp;Edit'<\/span>)\n        help_menu = menu_bar.addMenu(<span class=\"hljs-string\">'&amp;Help'<\/span>)\n\n        <span class=\"hljs-comment\"># new menu item<\/span>\n        new_action = QAction(QIcon(<span class=\"hljs-string\">'.\/assets\/new.png'<\/span>), <span class=\"hljs-string\">'&amp;New'<\/span>, self)\n        new_action.setStatusTip(<span class=\"hljs-string\">'Create a new document'<\/span>)\n        new_action.setShortcut(<span class=\"hljs-string\">'Ctrl+N'<\/span>)\n        new_action.triggered.connect(self.new_document)\n        file_menu.addAction(new_action)\n\n        <span class=\"hljs-comment\"># open menu item<\/span>\n        open_action = QAction(QIcon(<span class=\"hljs-string\">'.\/assets\/open.png'<\/span>), <span class=\"hljs-string\">'&amp;Open...'<\/span>, self)\n        open_action.triggered.connect(self.open_document)\n        open_action.setStatusTip(<span class=\"hljs-string\">'Open a document'<\/span>)\n        open_action.setShortcut(<span class=\"hljs-string\">'Ctrl+O'<\/span>)\n        file_menu.addAction(open_action)\n\n        <span class=\"hljs-comment\"># save menu item<\/span>\n        save_action = QAction(QIcon(<span class=\"hljs-string\">'.\/assets\/save.png'<\/span>), <span class=\"hljs-string\">'&amp;Save'<\/span>, self)\n        save_action.setStatusTip(<span class=\"hljs-string\">'Save the document'<\/span>)\n        save_action.setShortcut(<span class=\"hljs-string\">'Ctrl+S'<\/span>)\n        save_action.triggered.connect(self.save_document)\n        file_menu.addAction(save_action)\n\n        file_menu.addSeparator()\n\n        <span class=\"hljs-comment\"># exit menu item<\/span>\n        exit_action = QAction(QIcon(<span class=\"hljs-string\">'.\/assets\/exit.png'<\/span>), <span class=\"hljs-string\">'&amp;Exit'<\/span>, self)\n        exit_action.setStatusTip(<span class=\"hljs-string\">'Exit'<\/span>)\n        exit_action.setShortcut(<span class=\"hljs-string\">'Alt+F4'<\/span>)\n        exit_action.triggered.connect(self.quit)\n        file_menu.addAction(exit_action)\n\n        <span class=\"hljs-comment\"># edit menu<\/span>\n        undo_action = QAction(QIcon(<span class=\"hljs-string\">'.\/assets\/undo.png'<\/span>), <span class=\"hljs-string\">'&amp;Undo'<\/span>, self)\n        undo_action.setStatusTip(<span class=\"hljs-string\">'Undo'<\/span>)\n        undo_action.setShortcut(<span class=\"hljs-string\">'Ctrl+Z'<\/span>)\n        undo_action.triggered.connect(self.text_edit.undo)\n        edit_menu.addAction(undo_action)\n\n        redo_action = QAction(QIcon(<span class=\"hljs-string\">'.\/assets\/redo.png'<\/span>), <span class=\"hljs-string\">'&amp;Redo'<\/span>, self)\n        redo_action.setStatusTip(<span class=\"hljs-string\">'Redo'<\/span>)\n        redo_action.setShortcut(<span class=\"hljs-string\">'Ctrl+Y'<\/span>)\n        redo_action.triggered.connect(self.text_edit.redo)\n        edit_menu.addAction(redo_action)\n\n        about_action = QAction(QIcon(<span class=\"hljs-string\">'.\/assets\/about.png'<\/span>), <span class=\"hljs-string\">'About'<\/span>, self)\n        help_menu.addAction(about_action)\n        about_action.setStatusTip(<span class=\"hljs-string\">'About'<\/span>)\n        about_action.setShortcut(<span class=\"hljs-string\">'F1'<\/span>)\n\n        <span class=\"hljs-comment\"># toolbar<\/span>\n        toolbar = QToolBar(<span class=\"hljs-string\">'Main ToolBar'<\/span>)\n        self.addToolBar(toolbar)\n        toolbar.setIconSize(QSize(<span class=\"hljs-number\">16<\/span>, <span class=\"hljs-number\">16<\/span>))\n\n        toolbar.addAction(new_action)\n        toolbar.addAction(save_action)\n        toolbar.addAction(open_action)\n        toolbar.addSeparator()\n\n        toolbar.addAction(undo_action)\n        toolbar.addAction(redo_action)\n        toolbar.addSeparator()\n\n        toolbar.addAction(exit_action)\n\n        <span class=\"hljs-comment\"># status bar<\/span>\n        self.status_bar = self.statusBar()\n        self.show()\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">set_title<\/span><span class=\"hljs-params\">(self, filename=None)<\/span>:<\/span>\n        title = <span class=\"hljs-string\">f\"<span class=\"hljs-subst\">{filename <span class=\"hljs-keyword\">if<\/span> filename <span class=\"hljs-keyword\">else<\/span> <span class=\"hljs-string\">'Untitled'<\/span>}<\/span> - <span class=\"hljs-subst\">{self.title}<\/span>\"<\/span>\n        self.setWindowTitle(title)\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">confirm_save<\/span><span class=\"hljs-params\">(self)<\/span>:<\/span>\n        <span class=\"hljs-keyword\">if<\/span> <span class=\"hljs-keyword\">not<\/span> self.text_edit.document().isModified():\n            <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-literal\">True<\/span>\n\n        message = <span class=\"hljs-string\">f\"Do you want to save changes to <span class=\"hljs-subst\">{self.path <span class=\"hljs-keyword\">if<\/span> self.path <span class=\"hljs-keyword\">else<\/span> <span class=\"hljs-string\">'Untitled'<\/span>}<\/span>?\"<\/span>\n        MsgBoxBtn = QMessageBox.StandardButton\n        MsgBoxBtn = MsgBoxBtn.Save | MsgBoxBtn.Discard | MsgBoxBtn.Cancel\n\n        button = QMessageBox.question(\n            self, self.title, message, buttons=MsgBoxBtn\n        )\n\n        <span class=\"hljs-keyword\">if<\/span> button == MsgBoxBtn.Cancel:\n            <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-literal\">False<\/span>\n\n        <span class=\"hljs-keyword\">if<\/span> button == MsgBoxBtn.Save:\n            self.save_document()\n\n        <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-literal\">True<\/span>\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">new_document<\/span><span class=\"hljs-params\">(self)<\/span>:<\/span>\n        <span class=\"hljs-keyword\">if<\/span> self.confirm_save():\n            self.text_edit.clear()\n            self.set_title()\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">save_document<\/span><span class=\"hljs-params\">(self)<\/span>:<\/span>\n        <span class=\"hljs-comment\"># save the currently openned file<\/span>\n        <span class=\"hljs-keyword\">if<\/span> (self.path):\n            <span class=\"hljs-keyword\">return<\/span> self.path.write_text(self.text_edit.toPlainText())\n\n        <span class=\"hljs-comment\"># save a new file<\/span>\n        filename, _ = QFileDialog.getSaveFileName(\n            self, <span class=\"hljs-string\">'Save File'<\/span>, filter=self.filters\n        )\n\n        <span class=\"hljs-keyword\">if<\/span> <span class=\"hljs-keyword\">not<\/span> filename:\n            <span class=\"hljs-keyword\">return<\/span>\n\n        self.path = Path(filename)\n        self.path.write_text(self.text_edit.toPlainText())\n        self.set_title(filename)\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">open_document<\/span><span class=\"hljs-params\">(self)<\/span>:<\/span>\n        filename, _ = QFileDialog.getOpenFileName(self, filter=self.filters)\n        <span class=\"hljs-keyword\">if<\/span> filename:\n            self.path = Path(filename)\n            self.text_edit.setText(self.path.read_text())\n            self.set_title(filename)\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">quit<\/span><span class=\"hljs-params\">(self)<\/span>:<\/span>\n        <span class=\"hljs-keyword\">if<\/span> self.confirm_save():\n            self.destroy()\n\n\n<span class=\"hljs-keyword\">if<\/span> __name__ == <span class=\"hljs-string\">'__main__'<\/span>:\n    <span class=\"hljs-keyword\">try<\/span>:\n        <span class=\"hljs-keyword\">import<\/span> ctypes\n        myappid = <span class=\"hljs-string\">'mycompany.myproduct.subproduct.version'<\/span>\n        ctypes.windll.shell32.SetCurrentProcessExplicitAppUserModelID(myappid)\n    <span class=\"hljs-keyword\">finally<\/span>:\n        app = QApplication(sys.argv)\n        window = MainWindow()\n        sys.exit(app.exec())<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>How it works (We&#8217;ll focus on the toolbar part)<\/p>\n\n\n\n<p>First, create a new toolbar object using the <code>QToolBar<\/code> class and add it to the main window using the <code>addToolBar()<\/code> method.<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">toolbar = QToolBar(<span class=\"hljs-string\">'Main ToolBar'<\/span>)\nself.addToolBar(toolbar)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Next, set the icon size of the icons on the toolbar to (16,16):<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">toolbar.setIconSize(QSize(<span class=\"hljs-number\">16<\/span>, <span class=\"hljs-number\">16<\/span>))<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Then, add new, save, and open actions to the toolbar. Also, add a separator using the <code>addSeparator()<\/code> method:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">toolbar.addAction(new_action)\ntoolbar.addAction(save_action)\ntoolbar.addAction(open_action)\ntoolbar.addSeparator()<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>After that, add undo and redo actions to the toolbar and another separator:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">toolbar.addAction(undo_action)\ntoolbar.addAction(redo_action)\ntoolbar.addSeparator()<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Finally, add the exit action:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">toolbar.addAction(exit_action)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2>Summary<\/h2>\n\n\n\n<ul><li>Use the <code>QToolBar<\/code> class to create a new toolbar.<\/li><li>Use the <code>addToolBar()<\/code> method to add a toolbar to the main window.<\/li><li>Use the <code>addAction()<\/code> method to add an item to the toolbar.<\/li><li>Use the <code>addSeparator()<\/code> method to add a separator to the buttons.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Did you find this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"5192\"\n\t\t\t\tdata-post-url=\"https:\/\/www.pythontutorial.net\/pyqt\/pyqt-qtoolbar\/\"\n\t\t\t\tdata-post-title=\"PyQt QToolBar\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"5192\"\n\t\t\t\tdata-post-url=\"https:\/\/www.pythontutorial.net\/pyqt\/pyqt-qtoolbar\/\"\n\t\t\t\tdata-post-title=\"PyQt QToolBar\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you&#8217;ll learn how to use the PyQt QToolBar class to create toolbar widgets.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":4862,"menu_order":27,"comment_status":"closed","ping_status":"closed","template":"","meta":[],"_links":{"self":[{"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/pages\/5192"}],"collection":[{"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/comments?post=5192"}],"version-history":[{"count":4,"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/pages\/5192\/revisions"}],"predecessor-version":[{"id":5208,"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/pages\/5192\/revisions\/5208"}],"up":[{"embeddable":true,"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/pages\/4862"}],"wp:attachment":[{"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/media?parent=5192"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}