{"id":5211,"date":"2022-10-13T04:45:39","date_gmt":"2022-10-13T04:45:39","guid":{"rendered":"https:\/\/www.pythontutorial.net\/?page_id=5211"},"modified":"2022-10-29T08:08:14","modified_gmt":"2022-10-29T08:08:14","slug":"pyqt-qfiledialog","status":"publish","type":"page","link":"https:\/\/www.pythontutorial.net\/pyqt\/pyqt-qfiledialog\/","title":{"rendered":"PyQt QFileDialog"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you&#8217;ll learn how to use the PyQt <code>QFileDialog<\/code> class to create file dialogs that allow users to select files or directories from the file system.<\/p>\n\n\n\n<h2>Introduction to the PyQt QFileDialog<\/h2>\n\n\n\n<p>The <code>QFileDialog<\/code> class creates a file dialog widget that allows users to traverse the file system and select one or more files or a directory.<\/p>\n\n\n\n<p>To create a file dialog object, you create a new instance of the <code>QFileDialog<\/code>:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">dialog = QFileDialog(self)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>QFileDialog<\/code> object has the <code>setFileMode()<\/code> method that allows users to select an existing file:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">dialog.setFileMode(QFileDialog.FileMode.ExistingFiles)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>or a file that does not exist: <\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">dialog.setFileMode(QFileDialog.FileMode.AnyFile)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>This option is useful for the Save As file dialog scenario.  See the <code>QFileDialog<\/code>.FileMode enum for the complete file modes.<\/p>\n\n\n\n<h3>Filtering file types<\/h3>\n\n\n\n<p>To specify which types of files users are expected to select, you can use the <code>setNameFilter()<\/code> method. For example, the following filter expects users to select only <code>PNG<\/code> and <code>JPEG<\/code> files:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">dialog.setNameFilter(<span class=\"hljs-string\">\"Images (*.png *.jpg)\"<\/span>)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>To use multiple filters, you need to separate each with <strong>two<\/strong> semicolons. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-string\">\"Images (*.png  *.jpg);;Vector (*.svg)\"<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3>Setting views for file dialogs<\/h3>\n\n\n\n<p>The file dialog has two view modes: list and detail.<\/p>\n\n\n\n<ul><li>The list view shows the contents of the current directory as a list of files and directory names <\/li><li>The detail view displays additional information such as file sizes and modified dates. <\/li><\/ul>\n\n\n\n<p>To set the view mode, you use the <code>setViewMode()<\/code> method:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">dialog.setViewMode(QFileDialog.Detail)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Once you complete the setting, you can show the file dialog using the <code>selectFiles()<\/code> method. If the user clicks the <code>OK<\/code> button, the selected files are put in <code>fileNames<\/code>:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-keyword\">if<\/span> dialog.exec_():\n    fileNames = dialog.selectedFiles()<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>To set starting directory of the file dialog, you use the <code>setDirectory()<\/code> method. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">dialog.setDirectory(<span class=\"hljs-string\">'C:\/images\/'<\/span>)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The following program uses a file dialog that allows users to select image files:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import<\/span> sys\n<span class=\"hljs-keyword\">from<\/span> PyQt6.QtWidgets <span class=\"hljs-keyword\">import<\/span> (\n    QApplication, \n    QWidget, \n    QFileDialog, \n    QGridLayout,\n    QPushButton, \n    QLabel,\n    QListWidget\n)\n<span class=\"hljs-keyword\">from<\/span> pathlib <span class=\"hljs-keyword\">import<\/span> Path\n\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">MainWindow<\/span><span class=\"hljs-params\">(QWidget)<\/span>:<\/span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">__init__<\/span><span class=\"hljs-params\">(self, *args, **kwargs)<\/span>:<\/span>\n        super().__init__(*args, **kwargs)\n\n        self.setWindowTitle(<span class=\"hljs-string\">'PyQt File Dialog'<\/span>)\n        self.setGeometry(<span class=\"hljs-number\">100<\/span>, <span class=\"hljs-number\">100<\/span>, <span class=\"hljs-number\">300<\/span>, <span class=\"hljs-number\">150<\/span>)\n\n        layout = QGridLayout()\n        self.setLayout(layout)\n\n        <span class=\"hljs-comment\"># file selection<\/span>\n        file_browser_btn = QPushButton(<span class=\"hljs-string\">'Browse'<\/span>)\n        file_browser_btn.clicked.connect(self.open_file_dialog)\n\n        self.file_list = QListWidget(self)\n\n        layout.addWidget(QLabel(<span class=\"hljs-string\">'Files:'<\/span>), <span class=\"hljs-number\">0<\/span>, <span class=\"hljs-number\">0<\/span>)\n        layout.addWidget(self.file_list, <span class=\"hljs-number\">1<\/span>, <span class=\"hljs-number\">0<\/span>)\n        layout.addWidget(file_browser_btn, <span class=\"hljs-number\">2<\/span> ,<span class=\"hljs-number\">0<\/span>)\n\n        self.show()\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">open_file_dialog<\/span><span class=\"hljs-params\">(self)<\/span>:<\/span>\n        dialog = QFileDialog(self)\n        dialog.setDirectory(<span class=\"hljs-string\">r'C:\\images'<\/span>)\n        dialog.setFileMode(QFileDialog.FileMode.ExistingFiles)\n        dialog.setNameFilter(<span class=\"hljs-string\">\"Images (*.png *.jpg)\"<\/span>)\n        dialog.setViewMode(QFileDialog.ViewMode.List)\n        <span class=\"hljs-keyword\">if<\/span> dialog.exec():\n            filenames = dialog.selectedFiles()\n            <span class=\"hljs-keyword\">if<\/span> filenames:\n                self.file_list.addItems(&#91;str(Path(filename)) <span class=\"hljs-keyword\">for<\/span> filename <span class=\"hljs-keyword\">in<\/span> filenames])\n\n\n<span class=\"hljs-keyword\">if<\/span> __name__ == <span class=\"hljs-string\">'__main__'<\/span>:\n    app = QApplication(sys.argv)\n    window = MainWindow()\n    sys.exit(app.exec())<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2>Selecting a single file using the getOpenFileName() method<\/h2>\n\n\n\n<p>It&#8217;s more concise to use the static method <code>getOpenFileName()<\/code> of the <code>QFileDialog<\/code> class to open file dialog. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import<\/span> sys\n<span class=\"hljs-keyword\">from<\/span> PyQt6.QtWidgets <span class=\"hljs-keyword\">import<\/span> QApplication, QMainWindow, QFileDialog, QWidget, QGridLayout,QLineEdit,QPushButton, QLabel\n<span class=\"hljs-keyword\">from<\/span> pathlib <span class=\"hljs-keyword\">import<\/span> Path\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">MainWindow<\/span><span class=\"hljs-params\">(QWidget)<\/span>:<\/span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">__init__<\/span><span class=\"hljs-params\">(self, *args, **kwargs)<\/span>:<\/span>\n        super().__init__(*args, **kwargs)\n\n        self.setWindowTitle(<span class=\"hljs-string\">'PyQt File Dialog'<\/span>)\n        self.setGeometry(<span class=\"hljs-number\">100<\/span>, <span class=\"hljs-number\">100<\/span>, <span class=\"hljs-number\">400<\/span>, <span class=\"hljs-number\">100<\/span>)\n\n        layout = QGridLayout()\n        self.setLayout(layout)\n\n        <span class=\"hljs-comment\"># file selection<\/span>\n        file_browse = QPushButton(<span class=\"hljs-string\">'Browse'<\/span>)\n        file_browse.clicked.connect(self.open_file_dialog)\n        self.filename_edit = QLineEdit()\n\n        layout.addWidget(QLabel(<span class=\"hljs-string\">'File:'<\/span>), <span class=\"hljs-number\">0<\/span>, <span class=\"hljs-number\">0<\/span>)\n        layout.addWidget(self.filename_edit, <span class=\"hljs-number\">0<\/span>, <span class=\"hljs-number\">1<\/span>)\n        layout.addWidget(file_browse, <span class=\"hljs-number\">0<\/span> ,<span class=\"hljs-number\">2<\/span>)\n\n      \n        self.show()\n\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">open_file_dialog<\/span><span class=\"hljs-params\">(self)<\/span>:<\/span>\n        filename, ok = QFileDialog.getOpenFileName(\n            self,\n            <span class=\"hljs-string\">\"Select a File\"<\/span>, \n            <span class=\"hljs-string\">\"D:\\\\icons\\\\avatar\\\\\"<\/span>, \n            <span class=\"hljs-string\">\"Images (*.png *.jpg)\"<\/span>\n        )\n        <span class=\"hljs-keyword\">if<\/span> filename:\n            path = Path(filename)\n            self.filename_edit.setText(str(path))\n\n\n<span class=\"hljs-keyword\">if<\/span> __name__ == <span class=\"hljs-string\">'__main__'<\/span>:\n    app = QApplication(sys.argv)\n    window = MainWindow()\n    sys.exit(app.exec())<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img decoding=\"async\" loading=\"lazy\" width=\"602\" height=\"196\" src=\"https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2022\/10\/PyQt-File-Dialog-Select-a-single-file.png\" alt=\"\" class=\"wp-image-5217\" srcset=\"https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2022\/10\/PyQt-File-Dialog-Select-a-single-file.png 602w, https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2022\/10\/PyQt-File-Dialog-Select-a-single-file-300x98.png 300w\" sizes=\"(max-width: 602px) 100vw, 602px\" \/><\/figure>\n\n\n\n<p>How it works.<\/p>\n\n\n\n<p>First, create a button and connect the clicked signal with the <code>open_file_dialog<\/code> method:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-11\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">file_browse = QPushButton(<span class=\"hljs-string\">'Browse'<\/span>)\nfile_browse.clicked.connect(self.open_file_dialog)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-11\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Second, define the <code>open_file_dialog()<\/code> method and call the <code>getOpenFileName()<\/code> static method of the <code>QFileDialog<\/code> class to open a file dialog:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-12\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">open_file_dialog<\/span><span class=\"hljs-params\">(self)<\/span>:<\/span>\n    filename, _ = QFileDialog.getOpenFileName(\n        self,\n        <span class=\"hljs-string\">\"Select a File\"<\/span>,\n        <span class=\"hljs-string\">r\"C:\\images\\\",\n        \"<\/span>Images (*.png *.jpg)<span class=\"hljs-string\">\"\n    )\n    if filename:\n        path = Path(filename)\n        self.filename_edit.setText(str(path))<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-12\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>getOpenFileName()<\/code> has the title of &#8220;Select a File&#8221;, starting directory as &#8220;C:\\images\\&#8221;, and expects users to select a png or jpg file only.<\/p>\n\n\n\n<p>The <code>getOpenFileName()<\/code> method returns a tuple. The first element of the tuple stores the selected file path. Since we don&#8217;t need the second element, we assign it to the _ variable.<\/p>\n\n\n\n<h2>Selecting multiple files using the getOpenFileNames() method<\/h2>\n\n\n\n<p>To allow users to select multiple files in a file dialog, you use the <code>getOpenFileNames()<\/code> method instead of the <code>getOpenFileName()<\/code> method.<\/p>\n\n\n\n<p>The <code>getOpenFileNames()<\/code> works like the <code>getOpenFileName()<\/code> except the first element of the returned tuple contains a list of the selected files.<\/p>\n\n\n\n<p>The following program uses the <code>getOpenFileNames()<\/code> method to allow users to select multiple files and fills a list widget with selected file names:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-13\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import<\/span> sys\n<span class=\"hljs-keyword\">from<\/span> PyQt6.QtWidgets <span class=\"hljs-keyword\">import<\/span> QApplication,  QFileDialog, QWidget, QGridLayout, QListWidget, QPushButton, QLabel\n<span class=\"hljs-keyword\">from<\/span> pathlib <span class=\"hljs-keyword\">import<\/span> Path\n\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">MainWindow<\/span><span class=\"hljs-params\">(QWidget)<\/span>:<\/span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">__init__<\/span><span class=\"hljs-params\">(self, *args, **kwargs)<\/span>:<\/span>\n        super().__init__(*args, **kwargs)\n\n        self.setWindowTitle(<span class=\"hljs-string\">'PyQt File Dialog'<\/span>)\n        self.setGeometry(<span class=\"hljs-number\">100<\/span>, <span class=\"hljs-number\">100<\/span>, <span class=\"hljs-number\">400<\/span>, <span class=\"hljs-number\">100<\/span>)\n\n        layout = QGridLayout()\n        self.setLayout(layout)\n\n        <span class=\"hljs-comment\"># file selection<\/span>\n        file_browse = QPushButton(<span class=\"hljs-string\">'Browse'<\/span>)\n        file_browse.clicked.connect(self.open_file_dialog)\n\n        self.file_list = QListWidget(self)\n\n        layout.addWidget(QLabel(<span class=\"hljs-string\">'Selected Files:'<\/span>), <span class=\"hljs-number\">0<\/span>, <span class=\"hljs-number\">0<\/span>)\n        layout.addWidget(self.file_list, <span class=\"hljs-number\">1<\/span>, <span class=\"hljs-number\">0<\/span>)\n        layout.addWidget(file_browse, <span class=\"hljs-number\">2<\/span>, <span class=\"hljs-number\">0<\/span>)\n\n        self.show()\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">open_file_dialog<\/span><span class=\"hljs-params\">(self)<\/span>:<\/span>\n        filenames, _ = QFileDialog.getOpenFileNames(\n            self,\n            <span class=\"hljs-string\">\"Select Files\"<\/span>,\n            <span class=\"hljs-string\">r\"C:\\images\\\",\n            \"<\/span>Images (*.png *.jpg)<span class=\"hljs-string\">\"\n        )\n        if filenames:\n            self.file_list.addItems(&#91;str(Path(filename))\n                                     for filename in filenames])\n\n\nif __name__ == '__main__':\n    app = QApplication(sys.argv)\n    window = MainWindow()\n    sys.exit(app.exec())<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-13\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img decoding=\"async\" loading=\"lazy\" width=\"602\" height=\"267\" src=\"https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2022\/10\/PyQt-File-Dialog-select-multiple-files.png\" alt=\"\" class=\"wp-image-5216\" srcset=\"https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2022\/10\/PyQt-File-Dialog-select-multiple-files.png 602w, https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2022\/10\/PyQt-File-Dialog-select-multiple-files-300x133.png 300w\" sizes=\"(max-width: 602px) 100vw, 602px\" \/><\/figure>\n\n\n\n<h2>Selecting a directory<\/h2>\n\n\n\n<p>To open a file dialog for selecting a directory, you use the <code>getExistingDirectory()<\/code> method of the <code>QFileDialog<\/code> class. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-14\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import<\/span> sys\n<span class=\"hljs-keyword\">from<\/span> PyQt6.QtWidgets <span class=\"hljs-keyword\">import<\/span> QApplication,  QFileDialog, QWidget, QGridLayout, QLineEdit, QPushButton, QLabel\n<span class=\"hljs-keyword\">from<\/span> pathlib <span class=\"hljs-keyword\">import<\/span> Path\n\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">MainWindow<\/span><span class=\"hljs-params\">(QWidget)<\/span>:<\/span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">__init__<\/span><span class=\"hljs-params\">(self, *args, **kwargs)<\/span>:<\/span>\n        super().__init__(*args, **kwargs)\n\n        self.setWindowTitle(<span class=\"hljs-string\">'PyQt File Dialog'<\/span>)\n        self.setGeometry(<span class=\"hljs-number\">100<\/span>, <span class=\"hljs-number\">100<\/span>, <span class=\"hljs-number\">400<\/span>, <span class=\"hljs-number\">100<\/span>)\n\n        layout = QGridLayout()\n        self.setLayout(layout)\n\n        <span class=\"hljs-comment\"># directory selection<\/span>\n        dir_btn = QPushButton(<span class=\"hljs-string\">'Browse'<\/span>)\n        dir_btn.clicked.connect(self.open_dir_dialog)\n        self.dir_name_edit = QLineEdit()\n\n        layout.addWidget(QLabel(<span class=\"hljs-string\">'Directory:'<\/span>), <span class=\"hljs-number\">1<\/span>, <span class=\"hljs-number\">0<\/span>)\n        layout.addWidget(self.dir_name_edit, <span class=\"hljs-number\">1<\/span>, <span class=\"hljs-number\">1<\/span>)\n        layout.addWidget(dir_btn, <span class=\"hljs-number\">1<\/span>, <span class=\"hljs-number\">2<\/span>)\n\n        self.show()\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">open_dir_dialog<\/span><span class=\"hljs-params\">(self)<\/span>:<\/span>\n        dir_name = QFileDialog.getExistingDirectory(self, <span class=\"hljs-string\">\"Select a Directory\"<\/span>)\n        <span class=\"hljs-keyword\">if<\/span> dir_name:\n            path = Path(dir_name)\n            self.dir_name_edit.setText(str(path))\n\n\n<span class=\"hljs-keyword\">if<\/span> __name__ == <span class=\"hljs-string\">'__main__'<\/span>:\n    app = QApplication(sys.argv)\n    window = MainWindow()\n    sys.exit(app.exec())<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-14\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img decoding=\"async\" loading=\"lazy\" width=\"602\" height=\"196\" src=\"https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2022\/10\/PyQt-File-Dialog-Select-a-dir.png\" alt=\"\" class=\"wp-image-5215\" srcset=\"https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2022\/10\/PyQt-File-Dialog-Select-a-dir.png 602w, https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2022\/10\/PyQt-File-Dialog-Select-a-dir-300x98.png 300w\" sizes=\"(max-width: 602px) 100vw, 602px\" \/><\/figure>\n\n\n\n<h2>Summary<\/h2>\n\n\n\n<ul><li>A file dialog allows you to select one or more files or a directory. <\/li><li>Use the <code>QFileDialog<\/code> class to create a file dialog widget.<\/li><li>Use the <code>getOpenFileName()<\/code> static method of the <code>QFileDialog<\/code> to create a file dialog that allows users to select a single file.<\/li><li>Use the <code>getOpenFileNames()<\/code> static method of the <code>QFileDialog<\/code> class to create a file dialog that allows users to select multiple files.<\/li><li>Use the <code>getExistingDirectory()<\/code> static method of the <code>QFileDialog<\/code> class to create a file dialog that allows users to select a directory.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Did you find this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"5211\"\n\t\t\t\tdata-post-url=\"https:\/\/www.pythontutorial.net\/pyqt\/pyqt-qfiledialog\/\"\n\t\t\t\tdata-post-title=\"PyQt QFileDialog\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"5211\"\n\t\t\t\tdata-post-url=\"https:\/\/www.pythontutorial.net\/pyqt\/pyqt-qfiledialog\/\"\n\t\t\t\tdata-post-title=\"PyQt QFileDialog\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>Summary: in this tutorial, you&#8217;ll learn how to use the PyQt QFileDialog class to create file dialogs that allow users to select files or directories from the file system. Introduction to the PyQt QFileDialog The QFileDialog class creates a file dialog widget that allows users to traverse the file system and select one or more [&hellip;]<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":4862,"menu_order":24,"comment_status":"closed","ping_status":"closed","template":"","meta":[],"_links":{"self":[{"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/pages\/5211"}],"collection":[{"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/comments?post=5211"}],"version-history":[{"count":5,"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/pages\/5211\/revisions"}],"predecessor-version":[{"id":5477,"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/pages\/5211\/revisions\/5477"}],"up":[{"embeddable":true,"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/pages\/4862"}],"wp:attachment":[{"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/media?parent=5211"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}