{"id":5092,"date":"2022-09-28T09:33:00","date_gmt":"2022-09-28T09:33:00","guid":{"rendered":"https:\/\/www.pythontutorial.net\/?page_id=5092"},"modified":"2022-10-10T02:46:06","modified_gmt":"2022-10-10T02:46:06","slug":"pyqt-qmainwindow","status":"publish","type":"page","link":"https:\/\/www.pythontutorial.net\/pyqt\/pyqt-qmainwindow\/","title":{"rendered":"PyQt QMainWindow"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you&#8217;ll learn how to use the PyQt QMainWindow to create the main window of an application.<\/p>\n\n\n\n<h2>Introduction to the PyQt QMainWindow <\/h2>\n\n\n\n<p>So far, you have learned how to use  <code><code>QWidget<\/code><\/code> to create the main window for applications. The <code><code>QWidget<\/code><\/code> works fine for simple applications but doesn&#8217;t support common features of full-blown desktop applications like menu bars, toolbars, and status bars.<\/p>\n\n\n\n<p>PyQt provides you with <code><code>QMainWindow<\/code><\/code> that support a menu bar, toolbars, and status bar out of the box. So instead of subclassing the <code>QWidget<\/code> class, you can create the main window by inheriting it from the <code><code>QMainWindow<\/code><\/code> class like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">MainWindow<\/span><span class=\"hljs-params\">(QMainWindow)<\/span>:<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>PyQt divides the <code>QMainWindow<\/code> widget into some sections as shown in the following picture: <\/p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img decoding=\"async\" loading=\"lazy\" width=\"527\" height=\"437\" src=\"https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2022\/10\/QMainWindow.png\" alt=\"QMainWindow Layout\" class=\"wp-image-5158\" srcset=\"https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2022\/10\/QMainWindow.png 527w, https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2022\/10\/QMainWindow-300x249.png 300w\" sizes=\"(max-width: 527px) 100vw, 527px\" \/><\/figure>\n\n\n\n<p class=\"note\">Note that you should not set a layout for the <code>QMainWindow<\/code>. If you do so, you&#8217;ll break the preset arrangement of the widgets.<\/p>\n\n\n\n<h3>Set the central widget<\/h3>\n\n\n\n<p>A <code><code>QMainWindow<\/code><\/code> has one and only one central widget. To set a widget as a central widget, you use the <code>setCentralWidget()<\/code> method of the <code><code>QMainWindow<\/code><\/code> object. <\/p>\n\n\n\n<p>For example, the following uses the <code>setCentralWidget()<\/code> method to set the <code><a href=\"https:\/\/www.pythontutorial.net\/pyqt\/pyqt-qtextedit\/\">QTextEdit<\/a><\/code> as the central widget:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">self.setCentralWidget(QTextEdit())<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3>Set the window title<\/h3>\n\n\n\n<p>To set the title for the main window, you use the <code>setWindowTitle()<\/code> method. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-keyword\">self<\/span>.setWindowTitle(<span class=\"hljs-string\">'Editor'<\/span>)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h3>Set the window icon <\/h3>\n\n\n\n<p>To set the icon for the window, you use the <code>setWindowIcon()<\/code> method. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"> <span class=\"hljs-keyword\">self<\/span>.setWindowIcon(QIcon(<span class=\"hljs-string\">'.\/assets\/editor.png'<\/span>))<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example: <\/p>\n\n\n\n<ul><li>First, create a <code>QIcon<\/code> and pass in the image path <code>.\/assets\/editor.png<\/code><\/li><li>Second, pass the <code>QIcon<\/code> object to the <code>setWindowIcon()<\/code> method to set the icon for the window.<\/li><\/ul>\n\n\n\n<h3>Set the geometry for the main window<\/h3>\n\n\n\n<p>The geometry defines the coordinate of the window (x,y) or (top, left) and the window&#8217;s width and height:<\/p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img decoding=\"async\" loading=\"lazy\" width=\"490\" height=\"377\" src=\"https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2022\/10\/PyQT-QMainWindow-Geometry.png\" alt=\"\" class=\"wp-image-5161\" srcset=\"https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2022\/10\/PyQT-QMainWindow-Geometry.png 490w, https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2022\/10\/PyQT-QMainWindow-Geometry-300x231.png 300w\" sizes=\"(max-width: 490px) 100vw, 490px\" \/><\/figure>\n\n\n\n<p>To set the geometry for the window, you use the <code>setGeometry()<\/code> method of the <code>QMainWindow<\/code> object. For example, the following uses the <code>setGeometry()<\/code> method to set the geometry for the window:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"CSS\" data-shcb-language-slug=\"css\"><span><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">self<\/span><span class=\"hljs-selector-class\">.setGeometry<\/span>(100, 100, 500, 300)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">CSS<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">css<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, the window will appear at (100, 100) with a width of 500px and height of 300px:<\/p>\n\n\n\n<p>The following program creates the main window using the <code>QMainWindow<\/code>, sets the central widget, and the window&#8217;s title, icon, and geometry:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">import sys\nfrom PyQt6.QtWidgets import QApplication, QMainWindow, QTextEdit, QToolBar, QStatusBar\nfrom PyQt6.QtGui import QIcon, QAction\n\n\nclass MainWindow(QMainWindow):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n        self.setWindowTitle('Editor')\n        self.setWindowIcon(QIcon('.\/assets\/editor.png'))\n        self.setGeometry(100, 100, 500, 300)\n\n        self.text_edit = QTextEdit(self)\n        self.setCentralWidget(self.text_edit)\n\n        self.show()\n\n\nif __name__ == '__main__':\n    app = QApplication(sys.argv)\n    window = MainWindow()\n    sys.exit(app.exec())\n<\/code><\/span><\/pre>\n\n\n<h2>Adding a menu bar<\/h2>\n\n\n\n<p>To add a menu bar to the main window, you use the <code>menuBar()<\/code> method of the <code>QMainWindow<\/code>:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">menu_bar = self.menuBar()<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code><code>menuBar()<\/code><\/code> method returns a <code><code><code><code>QMenuBar<\/code><\/code><\/code><\/code> object. If a <code><code><code><code>QMenuBar<\/code><\/code><\/code><\/code> object doesn&#8217;t exist, the <code><code>menuBar()<\/code><\/code> will create a new <code><code><code><code>QMenuBar<\/code><\/code><\/code><\/code> object before returning it. Otherwise, it returns the existing <code><code><code><code>QMenuBar<\/code><\/code><\/code><\/code> object.<\/p>\n\n\n\n<p>By default, the menu bar is empty. To add a menu to a menu bar, you use the <code>addMenu()<\/code> method. For example, the following adds three submenus File, Edit, and Help:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">file_menu = menu_bar.addMenu(<span class=\"hljs-string\">'&amp;File'<\/span>)\nedit_menu = menu_bar.addMenu(<span class=\"hljs-string\">'&amp;Edit'<\/span>)\nhelp_menu = menu_bar.addMenu(<span class=\"hljs-string\">'&amp;Help'<\/span>)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code><code>addMenu()<\/code><\/code> method returns a <code>QMenu<\/code> object that represents a drop-down submenu. The string that we pass to the <code><code>addMenu()<\/code><\/code> method is for labeling the menu in the menu bar.<\/p>\n\n\n\n<p>The character <code>&amp;<\/code> will underscore the character of the menu label when you press the <code>ALT<\/code> key. For example, <code>&amp;File<\/code> will underscore the letter <code>F<\/code>.<\/p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img decoding=\"async\" loading=\"lazy\" width=\"752\" height=\"496\" src=\"https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2022\/10\/PyQt-QMainWindow-with-a-Menu-Bar.png\" alt=\"\" class=\"wp-image-5164\" srcset=\"https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2022\/10\/PyQt-QMainWindow-with-a-Menu-Bar.png 752w, https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2022\/10\/PyQt-QMainWindow-with-a-Menu-Bar-300x198.png 300w\" sizes=\"(max-width: 752px) 100vw, 752px\" \/><\/figure>\n\n\n\n<h3>Action<\/h3>\n\n\n\n<p>To add menu items to a menu, you need to create actions. An action is an object of the <code>QAction<\/code> class that represents the functionality of the application. <\/p>\n\n\n\n<p>An action object requires a name and a callback to function properly. In addition, an action may contain an icon and a keyboard shortcut.<\/p>\n\n\n\n<p>To create an action, you can call the <code>addAction()<\/code> method of a <code>QMenu<\/code>. For example, the following adds three actions to the File menu:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">file_menu.addAction(<span class=\"hljs-string\">'New'<\/span>, lambda: <span class=\"hljs-keyword\">self<\/span>.text_edit.clear())\nfile_menu.addAction(<span class=\"hljs-string\">'Open'<\/span>, lambda: <span class=\"hljs-keyword\">print<\/span>(<span class=\"hljs-string\">'Open'<\/span>))\nfile_menu.addAction(<span class=\"hljs-string\">'Exit'<\/span>, <span class=\"hljs-keyword\">self<\/span>.destroy)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>If you click the New menu item, the <code>QTextEdit<\/code> widget will clear all contents. Similarly, by clicking the Open menu item, you&#8217;ll see a message on the console, and clicking the Exit menu will end the program.<\/p>\n\n\n\n<p>Also, you can create a <code>QAction<\/code> object and connects its triggered signal to a slot. For example, the following creates undo and redo actions and adds them to the Edit menu:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">undo_action = QAction(QIcon(<span class=\"hljs-string\">'.\/assets\/undo.png'<\/span>), <span class=\"hljs-string\">'Undo'<\/span>, self)\nundo_action.setShortcut(<span class=\"hljs-string\">'Ctrl+Z'<\/span>)\nundo_action.triggered.connect(self.text_edit.undo)\nedit_menu.addAction(undo_action)\n\nredo_action = QAction(QIcon(<span class=\"hljs-string\">'.\/assets\/redo.png'<\/span>), <span class=\"hljs-string\">'Redo'<\/span>, self)\nredo_action.setShortcut(<span class=\"hljs-string\">'Ctrl+Y'<\/span>)\nredo_action.triggered.connect(self.text_edit.redo)\nedit_menu.addAction(redo_action)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Note that the undo and redo actions have icons and keyboard shortcuts.<\/p>\n\n\n\n<p>The following program shows how to add a menu bar and menu items to the File and Edit menus:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">import sys\nfrom PyQt6.QtWidgets import QApplication, QMainWindow, QTextEdit, QToolBar, QStatusBar\nfrom PyQt6.QtGui import QIcon, QAction\n\n\nclass MainWindow(QMainWindow):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n        self.setWindowTitle('Editor')\n        self.setWindowIcon(QIcon('.\/assets\/editor.png'))\n        self.setGeometry(100, 100, 500, 300)\n\n        self.text_edit = QTextEdit(self)\n        self.setCentralWidget(self.text_edit)\n\n        # setting menu\n        menu_bar = self.menuBar()\n\n        file_menu = menu_bar.addMenu('&amp;File')\n        edit_menu = menu_bar.addMenu('&amp;Edit')\n        help_menu = menu_bar.addMenu('&amp;Help')\n\n        file_menu.addAction('New', lambda: self.text_edit.clear())\n        file_menu.addAction('Open', lambda: print('Open'))\n        file_menu.addAction('Exit', self.destroy)\n\n        undo_action = QAction(QIcon('.\/assets\/undo.png'), 'Undo', self)\n        undo_action.setShortcut('Ctrl+Z')\n        undo_action.triggered.connect(self.text_edit.undo)\n        edit_menu.addAction(undo_action)\n\n        redo_action = QAction(QIcon('.\/assets\/redo.png'), 'Redo', self)\n        redo_action.setShortcut('Ctrl+Y')\n        redo_action.triggered.connect(self.text_edit.redo)\n        edit_menu.addAction(redo_action)\n\n        self.show()\n\n\nif __name__ == '__main__':\n    app = QApplication(sys.argv)\n    window = MainWindow()\n    sys.exit(app.exec())\n<\/code><\/span><\/pre>\n\n\n<p>Output:<\/p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img decoding=\"async\" loading=\"lazy\" width=\"752\" height=\"496\" src=\"https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2022\/10\/PyQt-QMainWindow-with-Menu.png\" alt=\"\" class=\"wp-image-5165\" srcset=\"https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2022\/10\/PyQt-QMainWindow-with-Menu.png 752w, https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2022\/10\/PyQt-QMainWindow-with-Menu-300x198.png 300w\" sizes=\"(max-width: 752px) 100vw, 752px\" \/><\/figure>\n\n\n\n<h2>Adding a toolbar<\/h2>\n\n\n\n<p>A toolbar is a bar of icons and\/or text that expose the most commonly used function of the application.  To add a toolbar to the application:<\/p>\n\n\n\n<ul><li>First, create a new <code>QToolBar<\/code> object.<\/li><li>Second, add the toolbar to the application using the <code>addToolbar()<\/code> method of the <code>QMainWindow<\/code>.<\/li><\/ul>\n\n\n\n<p>For example, the following creates a new toolbar and adds it to the application:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">toolbar = QToolBar(<span class=\"hljs-string\">'Main toolbar'<\/span>)\nself.addToolBar(toolbar)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>To add an item to the toolbar, you use the <code>addAction()<\/code> method of the <code>QToolBar<\/code> object. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-11\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">toolbar.addAction(undo_action)\ntoolbar.addAction(redo_action)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-11\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The following program shows add a toolbar with the undo and redo actions:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-12\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import<\/span> sys\n<span class=\"hljs-keyword\">from<\/span> PyQt6.QtWidgets <span class=\"hljs-keyword\">import<\/span> QApplication, QMainWindow, QTextEdit, QToolBar\n<span class=\"hljs-keyword\">from<\/span> PyQt6.QtGui <span class=\"hljs-keyword\">import<\/span> QIcon, QAction\n\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">MainWindow<\/span><span class=\"hljs-params\">(QMainWindow)<\/span>:<\/span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">__init__<\/span><span class=\"hljs-params\">(self, *args, **kwargs)<\/span>:<\/span>\n        super().__init__(*args, **kwargs)\n\n        self.setWindowTitle(<span class=\"hljs-string\">'Editor'<\/span>)\n        self.setWindowIcon(QIcon(<span class=\"hljs-string\">'.\/assets\/editor.png'<\/span>))\n        self.setGeometry(<span class=\"hljs-number\">100<\/span>, <span class=\"hljs-number\">100<\/span>, <span class=\"hljs-number\">500<\/span>, <span class=\"hljs-number\">300<\/span>)\n\n        self.text_edit = QTextEdit(self)\n        self.setCentralWidget(self.text_edit)\n\n        <span class=\"hljs-comment\"># setting menu<\/span>\n        menu_bar = self.menuBar()\n\n        file_menu = menu_bar.addMenu(<span class=\"hljs-string\">'&amp;File'<\/span>)\n        edit_menu = menu_bar.addMenu(<span class=\"hljs-string\">'&amp;Edit'<\/span>)\n        help_menu = menu_bar.addMenu(<span class=\"hljs-string\">'&amp;Help'<\/span>)\n\n        file_menu.addAction(<span class=\"hljs-string\">'New'<\/span>, <span class=\"hljs-keyword\">lambda<\/span>: self.text_edit.clear())\n        file_menu.addAction(<span class=\"hljs-string\">'Open'<\/span>, <span class=\"hljs-keyword\">lambda<\/span>: print(<span class=\"hljs-string\">'Open'<\/span>))\n        file_menu.addAction(<span class=\"hljs-string\">'Exit'<\/span>, self.destroy)\n\n        undo_action = QAction(QIcon(<span class=\"hljs-string\">'.\/assets\/undo.png'<\/span>), <span class=\"hljs-string\">'Undo'<\/span>, self)\n        undo_action.setShortcut(<span class=\"hljs-string\">'Ctrl+Z'<\/span>)\n        undo_action.triggered.connect(self.text_edit.undo)\n        edit_menu.addAction(undo_action)\n\n        redo_action = QAction(QIcon(<span class=\"hljs-string\">'.\/assets\/redo.png'<\/span>), <span class=\"hljs-string\">'Redo'<\/span>, self)\n        redo_action.setShortcut(<span class=\"hljs-string\">'Ctrl+Y'<\/span>)\n        redo_action.triggered.connect(self.text_edit.redo)\n        edit_menu.addAction(redo_action)\n\n        <span class=\"hljs-comment\"># adding a toolbar<\/span>\n        toolbar = QToolBar(<span class=\"hljs-string\">'Main toolbar'<\/span>)\n        self.addToolBar(toolbar)\n\n        toolbar.addAction(undo_action)\n        toolbar.addAction(redo_action)\n\n        self.show()\n\n\n<span class=\"hljs-keyword\">if<\/span> __name__ == <span class=\"hljs-string\">'__main__'<\/span>:\n    app = QApplication(sys.argv)\n    window = MainWindow()\n    sys.exit(app.exec())<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-12\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2>Adding a status bar<\/h2>\n\n\n\n<p>A status bar is a bar located at the bottom of the main window. Typically, a status bar displays short text messages and\/or informational widgets. <\/p>\n\n\n\n<p>To add a status bar to the application, you create a <code>QStatusBar<\/code> object and set it to the main window using the <code>setStatusBar()<\/code> method:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-13\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">status_bar = QStatusBar()\nself.setStatusBar(status_bar)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-13\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>statusBar()<\/code> method of the <code>QMainWindow<\/code> returns a <code><code>QStatusBar<\/code><\/code> object. It will create a new <code><code>QStatusBar<\/code><\/code> object if the status bar doesn&#8217;t exist. <\/p>\n\n\n\n<p>To display a short message, you use the <code>showMessage()<\/code> method of the <code>QStatusBar<\/code> object:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-14\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">status_bar.showMessage(<span class=\"hljs-string\">'Awesome Editor v1.0'<\/span>)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-14\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Or you can directly use the <code>QStatusBar<\/code> object returned by the <code>statusBar()<\/code> method of the main window:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-15\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">self.status_bar.showMessage(<span class=\"hljs-string\">'Awesome Editor v1.0'<\/span>)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-15\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The following program shows a status bar:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-16\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import<\/span> sys\n<span class=\"hljs-keyword\">from<\/span> PyQt6.QtWidgets <span class=\"hljs-keyword\">import<\/span> QApplication, QMainWindow, QTextEdit, QToolBar, QStatusBar\n<span class=\"hljs-keyword\">from<\/span> PyQt6.QtGui <span class=\"hljs-keyword\">import<\/span> QIcon, QAction\n\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">MainWindow<\/span><span class=\"hljs-params\">(QMainWindow)<\/span>:<\/span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">__init__<\/span><span class=\"hljs-params\">(self, *args, **kwargs)<\/span>:<\/span>\n        super().__init__(*args, **kwargs)\n\n        self.setWindowTitle(<span class=\"hljs-string\">'Editor'<\/span>)\n        self.setWindowIcon(QIcon(<span class=\"hljs-string\">'.\/assets\/editor.png'<\/span>))\n        self.setGeometry(<span class=\"hljs-number\">100<\/span>, <span class=\"hljs-number\">100<\/span>, <span class=\"hljs-number\">500<\/span>, <span class=\"hljs-number\">300<\/span>)\n\n        self.text_edit = QTextEdit(self)\n        self.setCentralWidget(self.text_edit)\n\n        <span class=\"hljs-comment\"># setting menu<\/span>\n        menu_bar = self.menuBar()\n\n        file_menu = menu_bar.addMenu(<span class=\"hljs-string\">'&amp;File'<\/span>)\n        edit_menu = menu_bar.addMenu(<span class=\"hljs-string\">'&amp;Edit'<\/span>)\n        help_menu = menu_bar.addMenu(<span class=\"hljs-string\">'&amp;Help'<\/span>)\n\n        file_menu.addAction(<span class=\"hljs-string\">'New'<\/span>, <span class=\"hljs-keyword\">lambda<\/span>: self.text_edit.clear())\n        file_menu.addAction(<span class=\"hljs-string\">'Open'<\/span>, <span class=\"hljs-keyword\">lambda<\/span>: print(<span class=\"hljs-string\">'Open'<\/span>))\n        file_menu.addAction(<span class=\"hljs-string\">'Exit'<\/span>, self.destroy)\n\n        undo_action = QAction(QIcon(<span class=\"hljs-string\">'.\/assets\/undo.png'<\/span>), <span class=\"hljs-string\">'Undo'<\/span>, self)\n        undo_action.setShortcut(<span class=\"hljs-string\">'Ctrl+Z'<\/span>)\n        undo_action.triggered.connect(self.text_edit.undo)\n        edit_menu.addAction(undo_action)\n\n        redo_action = QAction(QIcon(<span class=\"hljs-string\">'.\/assets\/redo.png'<\/span>), <span class=\"hljs-string\">'Redo'<\/span>, self)\n        redo_action.setShortcut(<span class=\"hljs-string\">'Ctrl+Y'<\/span>)\n        redo_action.triggered.connect(self.text_edit.redo)\n        edit_menu.addAction(redo_action)\n\n        <span class=\"hljs-comment\"># adding a toolbar<\/span>\n        toolbar = QToolBar(<span class=\"hljs-string\">'Main toolbar'<\/span>)\n        self.addToolBar(toolbar)\n\n        toolbar.addAction(undo_action)\n        toolbar.addAction(redo_action)\n\n        <span class=\"hljs-comment\"># status bar<\/span>\n        self.status_bar = QStatusBar()\n        self.setStatusBar(self.status_bar)\n        self.status_bar.showMessage(<span class=\"hljs-string\">'Awesome Editor v1.0'<\/span>)\n\n        self.show()\n\n\n<span class=\"hljs-keyword\">if<\/span> __name__ == <span class=\"hljs-string\">'__main__'<\/span>:\n    app = QApplication(sys.argv)\n    window = MainWindow()\n    sys.exit(app.exec())\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-16\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img decoding=\"async\" loading=\"lazy\" width=\"752\" height=\"496\" src=\"https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2022\/10\/PyQt-QMainWindow-with-a-Status-Bar.png\" alt=\"\" class=\"wp-image-5166\" srcset=\"https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2022\/10\/PyQt-QMainWindow-with-a-Status-Bar.png 752w, https:\/\/www.pythontutorial.net\/wp-content\/uploads\/2022\/10\/PyQt-QMainWindow-with-a-Status-Bar-300x198.png 300w\" sizes=\"(max-width: 752px) 100vw, 752px\" \/><\/figure>\n\n\n\n<h2>Summary<\/h2>\n\n\n\n<ul><li>Use the <code>QMainWindow<\/code> class to create the main window for the application.<\/li><li>Use the <code>setWindowTitle()<\/code> method to set the title.<\/li><li>use the <code>setWindowIcon()<\/code> method to set the window&#8217;s icon.<\/li><li>Use the <code>setGeometry()<\/code> method to set the window&#8217;s geometry including the (top, left) coordinates, width, and height.<\/li><li>Use the <code>menuBar()<\/code> method to add a menu bar to the main window.<\/li><li>use the setToolBar() method to set a toolbar for the main window.<\/li><li>Use the <code>statusBar()<\/code> method to add a status bar to the main window. <\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Did you find this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"5092\"\n\t\t\t\tdata-post-url=\"https:\/\/www.pythontutorial.net\/pyqt\/pyqt-qmainwindow\/\"\n\t\t\t\tdata-post-title=\"PyQt QMainWindow\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"5092\"\n\t\t\t\tdata-post-url=\"https:\/\/www.pythontutorial.net\/pyqt\/pyqt-qmainwindow\/\"\n\t\t\t\tdata-post-title=\"PyQt QMainWindow\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you&#8217;ll learn how to use the PyQt QMainWindow to create the main window of an application.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":4862,"menu_order":25,"comment_status":"closed","ping_status":"closed","template":"","meta":[],"_links":{"self":[{"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/pages\/5092"}],"collection":[{"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/comments?post=5092"}],"version-history":[{"count":4,"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/pages\/5092\/revisions"}],"predecessor-version":[{"id":5169,"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/pages\/5092\/revisions\/5169"}],"up":[{"embeddable":true,"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/pages\/4862"}],"wp:attachment":[{"href":"https:\/\/www.pythontutorial.net\/wp-json\/wp\/v2\/media?parent=5092"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}